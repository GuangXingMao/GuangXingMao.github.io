<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shinx&#39;blog</title>
  <subtitle>人生如长跑，成长需进阶</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-09T16:12:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GuangXing Mao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]没有效率的勤奋,是傻</title>
    <link href="http://yoursite.com/2017/05/10/%E8%BD%AC-%E6%B2%A1%E6%9C%89%E6%95%88%E7%8E%87%E7%9A%84%E5%8B%A4%E5%A5%8B-%E6%98%AF%E5%82%BB/"/>
    <id>http://yoursite.com/2017/05/10/转-没有效率的勤奋-是傻/</id>
    <published>2017-05-09T16:08:31.000Z</published>
    <updated>2017-05-09T16:12:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人说，为什么我很勤奋，一直忙于工作、学习，却还是没有进步？</p>
<p><strong>有可能你的勤奋是无用功。</strong></p>
<p>读书的时候，我们发现，学霸们很聪明，但往往不是最勤奋的那个。他们无需花100%的时间学习，但因为学习效率高，一小时顶别人五小时，所以成绩好。而有的人花了200%的时间，勤奋得不睡觉，却还是赶不上他。</p>
<p>蒂姆·费瑞斯在《每周工作4小时》中重新更正了“勤奋”的含义。</p>
<p>他指出了勤奋和效率的重要区别，那些整天忙碌的人，事实上可能是以牺牲有效性为代价而维持勤奋状态的。正确的做法是，你的目标应该是富有成效——即你所做的事情必须能够让你更加接近你的目标。</p>
<p>可见，效率才是最重要的。</p>
<p>人的竞争，也是效率之争。你能不能管好自己？管好自己不是每天不断读书，而是单位时间的产出更高。一年读了500本书的人，长进未必高过读对了5本书的人。</p>
<p><strong>所以劳逸结合，该玩时开心的玩，该工作该学习时有效率的学习。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人说，为什么我很勤奋，一直忙于工作、学习，却还是没有进步？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有可能你的勤奋是无用功。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读书的时候，我们发现，学霸们很聪明，但往往不是最勤奋的那个。他们无需花100%的时间学习，但因为学习效率高，一小时顶别人五
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客的更新优化 </title>
    <link href="http://yoursite.com/2017/05/09/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9B%B4%E6%96%B0%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/05/09/hexo博客的更新优化/</id>
    <published>2017-05-09T15:54:25.000Z</published>
    <updated>2017-05-09T16:25:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="之后对博客界面，动画等的更新及优化就都写在这篇里面了。"><a href="#之后对博客界面，动画等的更新及优化就都写在这篇里面了。" class="headerlink" title="之后对博客界面，动画等的更新及优化就都写在这篇里面了。"></a>之后对博客界面，动画等的更新及优化就都写在这篇里面了。</h3><p>本人目前使用的主题是Hexo-NexT,所以想要配置一些相关的设置只要去其官网就行了，<a href="http://theme-next.iissnan.com" target="_blank" rel="external">点我跳转</a></p>
<p>另外再附上MarkDown的语法入门（Mou）,确实格式好看了很多<a href="http://www.jianshu.com/p/0130ad32a08d" target="_blank" rel="external">点我跳转</a></p>
<p><strong>2017.05.09</strong></p>
<p>1.添加了点击页面，有心心❤️飘出的动画<br>2.添加了页面背景的动态效果<br>以上相关设置<a href="http://wanzhiyu.tk/2017/01/20/教程/Hexo/Hexo-Next的背景动态效果和心心/" target="_blank" rel="external">点我跳转</a>  </p>
<p>3.设置腾讯公益404页面<br>4.设置站点建立时间<br>以上相关设置<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">点我跳转</a></p>
<p>5.添加阅读次数统计（leanCloud）<br>以上相关设置<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">点我跳转</a></p>
<p>6.设置头像 在主题的_config.xml中搜索avatar,头像的图片我是存储在七牛云上的，然后将头像的地址替换就好了</p>
<pre><code>avatar: http://opn79542e.bkt.clouddn.com/a.jpg
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;之后对博客界面，动画等的更新及优化就都写在这篇里面了。&quot;&gt;&lt;a href=&quot;#之后对博客界面，动画等的更新及优化就都写在这篇里面了。&quot; class=&quot;headerlink&quot; title=&quot;之后对博客界面，动画等的更新及优化就都写在这篇里面了。&quot;&gt;&lt;/a&gt;之后对博客
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android控件自动化埋点统计</title>
    <link href="http://yoursite.com/2017/05/09/android%E6%8E%A7%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%8B%E7%82%B9%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2017/05/09/android控件自动化埋点统计/</id>
    <published>2017-05-09T05:24:19.000Z</published>
    <updated>2017-05-09T16:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　想到应用统计，平时我们使用的一般都是第三方的，比如百度统计，友盟统计，这几天公司要做自己的统计，于是乎也找了一些自动化埋点的博文学习使用。最后会给出参考链接，非常感谢。</p>
<h3 id="现有的几种埋点技术的实现原理和优劣分析"><a href="#现有的几种埋点技术的实现原理和优劣分析" class="headerlink" title="现有的几种埋点技术的实现原理和优劣分析"></a>现有的几种埋点技术的实现原理和优劣分析</h3><p>　<strong>1.代码埋点</strong>：将收集数据的代码直接写在需要的地方，当用户点击某个控件或者打开某个页面时调用到该部分代码完成数据的收集。<br>　    优势：准确性高，收集数据和发送数据都能精确控制，同时能方便的设置自定义属性，自定义控件，自定义View等。<br>　    劣势：埋点工作量大，更新代价大。<br>　<strong>2.可视化埋点</strong>：根据配置文件收集用户行为，从而获取数据进行分析。<br>　  优势：无须手动埋点，配置文件可动态更新。<br>　  劣势：配置文件的配置比较耗时，弹出框，隐藏控件等行为不能收集。收集的数据比较简单，只能收集用户行为，不能收集到与行为相关的具体数据。<br>　<strong>3.无埋点</strong>：与可视化埋点基本一致。不同点在于可视化埋点是根据配置文件收集数据，无埋点是预先收集所有的用户行为，然后根据　配置文件来提取数据。无埋点可以通过修改配置文件追溯之前的用户行为数据。<br>　<strong>4.后端埋点</strong>：Sensors Analytics 这个平台有解决方案，优点是能收集到详细的与行为相关的数据，适用于电商等大平台。比如用户选择了一件商品，点击了加入购物车，那么可以收集到用户信息，商品信息，商品价格，商品库存，卖家等诸多信息。  </p>
<h3 id="埋点技术的选择"><a href="#埋点技术的选择" class="headerlink" title="埋点技术的选择"></a>埋点技术的选择</h3><p>　<strong>1.代码埋点</strong>：既可以自己与后台定义接口，也可以使用第三方，常用的有友盟，百度统计等。<br>　<strong>2.可视化埋点和无埋点</strong>：移动端可以自己实现数据采集。第三方有诸葛IO，GrowingIO 。在知乎上查了关于这两个平台的信息，GrowingIO隐藏收费，官网并没有说到收费，但是使用15天后发邮件通知收费并停止数据采集和分析。诸葛IO免费模式的数据量是每月200万条，还有其他收费模式。<br>　<strong>3.后端埋点</strong>：Sensors Analytics  </p>
<h3 id="方案采用"><a href="#方案采用" class="headerlink" title="方案采用"></a>方案采用</h3><p>　根据公司的需求以及对app的规模，只需实现控件按钮点击事件的监听，但是对控件的点击事件处都添加代码，工作量是有点大，所以我们采用控件自动化埋点的方法来统计，只需在BaseActvity中重写dispatchTouchEvent，在xml布局中给需要统计点击事件的控件添加tag标签即可,并不需要在每一个OnClickListener的地方加入拦截代码。  </p>
<h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p><em>创建BaseActivity基类，实现控件的点击监听，根据UI布局的特性和Android点击事件传递机制实现。让创建的BaseActivity基类重写Activity的dispatchTouchEvent,当touch button时，获取到按下和抬起产生的MotionEvent对象，从而通过getRawX()和getRawY()方法获取到点击位置在界面中的坐标，然后搜索所有子view或者控件的布局区域示范包含点击位置，从而判断那个view或控件被点击了，再通过getTag()获取到我们控件的标签。</em></p>
<p><strong> 1.首选在我们的application中设置启动自动埋点</strong></p>
<pre><code>    private void setAutoClickHook() {
        BehaviorUtil.setAutoCollectEvent(true);
        BehaviorUtil.setToastAutoCollectEvent(true);
    }
</code></pre><p><strong> 2.然后在onAttachedToWindow()方法，该方法是在onResumed()方法之后，当view和window绑定的时候就会调用该方法，在该方法中我们通过getWindow().getDecorView()方法获取到根节点view的对象。</strong></p>
<pre><code>   @Override
   public void onAttachedToWindow() {
        super.onAttachedToWindow();
        //获取到根节点的view
        rootView = getWindow().getDecorView(); 
        //控件在视图树上的根路径
        rootViewTree = getPackageName() + &quot;.&quot; + getClass().getSimpleName();    
        //前缀名 bigData
        bigDataPrefix = getString(R.string.collection_tag);
        //前缀名 bigData_    
        bigDataIngorePrefix = getString(R.string.collection_ignore_tag);
        //前缀名 bigdata_ignore
        bigDataEventPrefix = getString(R.string.collection_event_prefix);
   }
</code></pre><p><strong> 3.其次我们便重写dispatchTouchEvent()方法,我们判断是否自动埋点，如果为true，我们就处理自动埋点的事件</strong>  </p>
<pre><code>    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        //判断是否自动埋点
        if (BehaviorUtil.isAutoCollectEvent()) {
            dealAutoCollect(ev);
        }
        return super.dispatchTouchEvent(ev);
    }
</code></pre><p><strong> 3.在处理自动埋点的时候，我们就要判断touch状态，当为down的时候，我们就找到down点击位置的那个控件所在的视图</strong></p>
<pre><code>    private ClickView findClickView(MotionEvent ev) {
        Log.e(TAG, &quot;bigdata--&gt;findClickView&quot;);
        ClickView clickView = new ClickView(rootView, rootViewTree);
        return searchClickView(clickView, ev, 0);
    }
</code></pre><p><strong> 4.ClickView是一个自定义的内部类</strong></p>
<pre><code>    private static class ClickView {

        View   view;              //view
        String viewTree;          //view在视图树上的路径
        String specifyTag;
        int level            = 0;//层级默认为0
        int filterLevelCount = 3;//需要过滤的层级

        ClickView(View view, String viewTree) {
            this.view = view;
            this.viewTree = viewTree;
        }
    }
</code></pre><p><strong> 5.通过点击的视图再去查找点击的view</strong></p>
<pre><code>    private ClickView searchClickView(ClickView myView, MotionEvent event, int index) {
        ClickView clickView = null;
        View view = myView.view;
        if (isInView(view, event)) {    //遍历根view下的子view以及所有子view上的控件
            // 当第二层不为LinearLayout时，说明系统进行了改造，多了一层,需要多剔除一层
            myView.level++;
            if (myView.level == 2 &amp;&amp; !&quot;LinearLayout&quot;.equals(view.getClass().getSimpleName())) {
                myView.filterLevelCount++;
            }
            if (myView.level &gt; myView.filterLevelCount) {
                myView.viewTree = myView.viewTree + &quot;.&quot; + view.getClass().getSimpleName() + &quot;[&quot; + index + &quot;]&quot;;
            }
            Log.i(TAG, &quot;bigdata--&gt;tag = &quot; + view.getTag());
            // 如果Layout有设置特定的tag，则直接返回View，主要用于复合组件的点击事件
            if (view.getTag() != null) {
                // 主动标记不需要统计时，不进行自动统计
                String tag = view.getTag().toString();

                if (tag.startsWith(bigDataIngorePrefix)) {
                    return null;
                } else if (tag.startsWith(bigDataPrefix)) {
                    if (tag.startsWith(bigDataEventPrefix)) {
                        myView.specifyTag = tag.replace(bigDataEventPrefix, &quot;&quot;);
                    }
                    return myView;
                }
            }

            if (view instanceof ViewGroup) {    //遇到一些Layout之类的ViewGroup，继续遍历它下面的子View
                if (view instanceof AbsListView) {
                    Log.i(TAG, &quot;bigdata--&gt;AbsListView &quot;);
                    return null;
                }

                ViewGroup group = (ViewGroup) view;
                int childCount = group.getChildCount();

                if (childCount == 0) {
                    return myView;
                }
                for (int i = childCount - 1; i &gt;= 0; i--) {
                    myView.view = group.getChildAt(i);
                    clickView = searchClickView(myView, event, i);
                    if (clickView != null) {
                        return clickView;
                    }
                }
            } else {
                clickView = myView;
            }
        }
        return clickView;
    }
</code></pre><p><strong> 6.由于Activty的UI是层层嵌套的，isInView()方法就是通过根view层层遍历其下的子view以及子view上的控件，这些view和控件在屏幕中的坐标和高度我们是可以通过MotionEvent对象获取到的，从而搜索所有子view或者控件的布局区域示范包含“点击位置”，从而来判断那个view或控件被点击。</strong></p>
<pre><code>    private boolean isInView(View view, MotionEvent event) {
        //能被点击的view必然是可见的
        if (view == null || view.getVisibility() != View.VISIBLE) {
            return false;
        }
        int clickX = (int) event.getRawX();
        int clickY = (int) event.getRawY();
        //如下的view表示Activity中的子View或者控件
        int[] location = new int[2];
        view.getLocationOnScreen(location);
        int x = location[0];
        int y = location[1];
        int width = view.getWidth();
        int height = view.getHeight();
        //返回true，则判断这个view被点击了
        return clickX &gt; x &amp;&amp; clickX &lt; (x + width) &amp;&amp; clickY &gt; y &amp;&amp; clickY &lt; (y + height);
    }
</code></pre><p>7.找到被点击的view后，view的视图level++,</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　想到应用统计，平时我们使用的一般都是第三方的，比如百度统计，友盟统计，这几天公司要做自己的统计，于是乎也找了一些自动化埋点的博文学习使用。最后会给出参考链接，非常感谢。&lt;/p&gt;
&lt;h3 id=&quot;现有的几种埋点技术的实现原理和优劣分析&quot;&gt;&lt;a href=&quot;#现有的几种埋点
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5月份目标</title>
    <link href="http://yoursite.com/2017/05/08/5%E6%9C%88%E4%BB%BD%E7%9B%AE%E6%A0%87/"/>
    <id>http://yoursite.com/2017/05/08/5月份目标/</id>
    <published>2017-05-08T15:19:38.000Z</published>
    <updated>2017-05-08T16:30:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-hexo博客的更新优化-附上转载链接"><a href="#1-hexo博客的更新优化-附上转载链接" class="headerlink" title="1.hexo博客的更新优化(附上转载链接)"></a>1.hexo博客的更新优化(附上转载链接)</h4><h4 id="2-oc基本语法的学习-学习笔记记录"><a href="#2-oc基本语法的学习-学习笔记记录" class="headerlink" title="2.oc基本语法的学习(学习笔记记录)"></a>2.oc基本语法的学习(学习笔记记录)</h4><h4 id="3-android插件化与组件化的学习-附上demo"><a href="#3-android插件化与组件化的学习-附上demo" class="headerlink" title="3.android插件化与组件化的学习(附上demo)"></a>3.android插件化与组件化的学习(附上demo)</h4><h4 id="4-android无埋点数据收集-思路及实现"><a href="#4-android无埋点数据收集-思路及实现" class="headerlink" title="4.android无埋点数据收集(思路及实现)"></a>4.android无埋点数据收集(思路及实现)</h4><p>　　2017年过去近半了，感觉前几个月浑浑噩噩的过去了，收获的并不是很多，之前也在CSDN写过一些博客，但是  最后并没有坚持下来，一旦懒癌犯了，太可怕了。其实可以写的东西可以有很多，在公司做的项目经验，平时收藏的文章，摸爬滚打学习的新知识等等，今天用hexo和github搭了一个个人的网站，虽然还是很简陋，但是基本的功能已经实现了，之后还是会不断优化更新的，可以说真的很方便。这里推荐一篇教你如何搭建个人博客的文章（基于mac的），很详细，一步步来就能搭建成功了。<a href="http://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="external">点我跳转</a><br>　　其实写博客的目的对我来说也很简单，就是监督自己，知道自己最近学了什么，做了什么，最近的状态如何，及时的调整找回状态。<br>　　公司的V3.0App在5月中旬就要项目启动了，到时候肯定会很忙，但是在忙的同时，肯定也会有所收获，将这些收获一并记录下来，（想想以前的一些东西，都忘记了），作为经验总结。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　markdown用的还不是很熟练。。还要看一下md语法怎么改格式，弄的漂亮一点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-hexo博客的更新优化-附上转载链接&quot;&gt;&lt;a href=&quot;#1-hexo博客的更新优化-附上转载链接&quot; class=&quot;headerlink&quot; title=&quot;1.hexo博客的更新优化(附上转载链接)&quot;&gt;&lt;/a&gt;1.hexo博客的更新优化(附上转载链接)&lt;/h4
    
    </summary>
    
    
  </entry>
  
</feed>
