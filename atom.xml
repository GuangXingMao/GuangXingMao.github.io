<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shinx&#39;blog</title>
  <subtitle>人生如长跑，成长需进阶</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-21T16:50:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GuangXing Mao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oc语法学习(二)(java对比)</title>
    <link href="http://yoursite.com/2017/05/16/oc%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0(%E4%BA%8C)(java%E5%AF%B9%E6%AF%94)/"/>
    <id>http://yoursite.com/2017/05/16/oc语法学习(二)(java对比)/</id>
    <published>2017-05-16T15:03:40.000Z</published>
    <updated>2017-05-21T16:50:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="OC-NSString-字符串"><a href="#OC-NSString-字符串" class="headerlink" title="OC NSString/字符串"></a>OC NSString/字符串</h4><p>1.创建NSString对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//最简单的创建字符串对象的方法，使用@</div><div class="line">NSString *greeting = @&quot;Hello&quot;;</div><div class="line">//在java中更简单</div><div class="line">String greeting = &quot;hello&quot;;</div></pre></td></tr></table></figure></p>
<p>2.调用字符串的方法<br>(NSString <em>)capitalizedString;<br> (unichar)characterAtIndex:(NSUInteger)index;<br> (double)doubleValue;<br> (float)floatValue;<br> (BOOL)hasPrefix:(NSString </em>)aString;<br>  (BOOL)hasSuffix:(NSString <em>)aString;<br>(id)initWithFormat:(NSString </em>)format …;<br>(NSInteger)integerValue;<br>(BOOL)isEqualToString:(NSString <em>)aString;<br>(NSUInteger)length;<br>(NSString </em>)lowercaseString;<br>(NSRange)rangeOfString:(NSString <em>)aString;<br>(NSString </em>)stringByAppendingFormat:(NSString <em>)format …;<br> (NSString </em>)stringByTrimmingCharactersInSet:(NSCharacterSet <em>)set;<br>  (NSString </em>)substringFromIndex:(NSUInteger)anIndex ;<br>  差异：java中对象调方法，一般是</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.method()</div></pre></td></tr></table></figure>
<p>  而在oc中对象调方法，一般是</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[str method]</div></pre></td></tr></table></figure>
<p>  例</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">  #import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">//定义两个字符串对象</div><div class="line">   NSString *str1 = @&quot;Hello&quot;;</div><div class="line">   NSString *str2 = @&quot;World&quot;;</div><div class="line">//申明一个字符串对象</div><div class="line">   NSString *str3;</div><div class="line">   int  len ;</div><div class="line"></div><div class="line">   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];</div><div class="line">//将str3的值转成大写</div><div class="line">   /* uppercase string */</div><div class="line">   str3 = [str2 uppercaseString];</div><div class="line">   NSLog(@&quot;Uppercase String :  %@</div><div class="line">&quot;, str3 );</div><div class="line"></div><div class="line">   /* concatenates str1 and str2 */</div><div class="line">//将str1的值拼接上&quot;world&quot;,并赋值给str3</div><div class="line">   str3 = [str1 stringByAppendingFormat:@&quot;World&quot;];</div><div class="line">   NSLog(@&quot;Concatenated string:   %@</div><div class="line">&quot;, str3 );</div><div class="line"></div><div class="line">   /* total length of str3 after concatenation */</div><div class="line">//打印出str3的长度</div><div class="line">   len = [str3 length];</div><div class="line">   NSLog(@&quot;Length of Str3 :  %d</div><div class="line">&quot;, len );</div><div class="line">    </div><div class="line">   /* InitWithFormat */</div><div class="line">//将str3通过%@ %@ 格式输出，并将str1和str2替换%@</div><div class="line">    str3 = [[NSString alloc] initWithFormat:@&quot;%@ %@&quot;,str1,str2];	</div><div class="line">    NSLog(@&quot;Using initWithFormat:   %@</div><div class="line">&quot;, str3 );</div><div class="line">    [pool drain];</div><div class="line"></div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="OC-struct-结构"><a href="#OC-struct-结构" class="headerlink" title="OC struct/结构"></a>OC struct/结构</h4><p>1.定义一个结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">struct [structure tag]</div><div class="line">&#123;</div><div class="line">   member definition;</div><div class="line">   member definition;</div><div class="line">   ...</div><div class="line">   member definition;</div><div class="line">&#125; [one or more structure variables]; </div><div class="line">例</div><div class="line">struct Books</div><div class="line">&#123;</div><div class="line">   NSString *title;</div><div class="line">   NSString *author;</div><div class="line">   NSString *subject;</div><div class="line">   int   book_id;</div><div class="line">&#125; book;</div></pre></td></tr></table></figure>
<p>差异：oc的结果很像java中的bean类，通常会这样写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">类中添加很多字段，然后可以通过book.title调用其属性（事先该属性为public）</div><div class="line">class book &#123;</div><div class="line">   public String title;</div><div class="line">   public String author;</div><div class="line">   public String subject;</div><div class="line">   public int book_id;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-作为函数参数的结构"><a href="#2-作为函数参数的结构" class="headerlink" title="2.作为函数参数的结构"></a>2.作为函数参数的结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">//定义一个结构</div><div class="line">struct Books</div><div class="line">&#123;</div><div class="line">   NSString *title;</div><div class="line">   NSString *author;</div><div class="line">   NSString *subject;</div><div class="line">   int   book_id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//定义一个接口</div><div class="line">@interface SampleClass:NSObject</div><div class="line"></div><div class="line">/* function declaration */</div><div class="line">- (void) printBook:( struct Books) book ;</div><div class="line"></div><div class="line">@end</div><div class="line">//接口的实现类</div><div class="line">@implementation SampleClass </div><div class="line">//实现的方法，形参为Book结构的对象</div><div class="line">- (void) printBook:( struct Books) book</div><div class="line">&#123;</div><div class="line">   NSLog(@&quot;Book title : %@</div><div class="line">&quot;, book.title);</div><div class="line">   NSLog(@&quot;Book author : %@</div><div class="line">&quot;, book.author);</div><div class="line">   NSLog(@&quot;Book subject : %@</div><div class="line">&quot;, book.subject);</div><div class="line">   NSLog(@&quot;Book book_id : %d</div><div class="line">&quot;, book.book_id);</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">int main( )</div><div class="line">&#123;</div><div class="line">   struct Books Book1;        /* Declare Book1 of type Book */</div><div class="line">   struct Books Book2;        /* Declare Book2 of type Book */</div><div class="line"> //给结构里的字段赋值</div><div class="line">   /* book 1 specification */</div><div class="line">   Book1.title = @&quot;Objective-C Programming&quot;;</div><div class="line">   Book1.author = @&quot;Nuha Ali&quot;; </div><div class="line">   Book1.subject = @&quot;Objective-C Programming Tutorial&quot;;</div><div class="line">   Book1.book_id = 6495407;</div><div class="line"></div><div class="line">   /* book 2 specification */</div><div class="line">   Book2.title = @&quot;Telecom Billing&quot;;</div><div class="line">   Book2.author = @&quot;Zara Ali&quot;;</div><div class="line">   Book2.subject = @&quot;Telecom Billing Tutorial&quot;;</div><div class="line">   Book2.book_id = 6495700;</div><div class="line"> </div><div class="line">   SampleClass *sampleClass = [[SampleClass alloc]init];</div><div class="line">   /* print Book1 info */</div><div class="line">   [sampleClass printBook: Book1];</div><div class="line">//调用printBook方法打印结构中的值</div><div class="line">   /* Print Book2 info */</div><div class="line">   [sampleClass printBook: Book2];</div><div class="line"></div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-指向结构的指针"><a href="#3-指向结构的指针" class="headerlink" title="3.指向结构的指针"></a>3.指向结构的指针</h5><p>·定义结构体指针</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">struct Books *struct_yiibaier;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//存储结构体变量的地址</div><div class="line">struct_yiibaier = &amp;Book1;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//访问成员的结构，使用该结构的一个指针，必须使用-&gt;运算符</div><div class="line">struct_yiibaier-&gt;title;</div></pre></td></tr></table></figure>
<p>例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">//定义一个结构</div><div class="line">struct Books</div><div class="line">&#123;</div><div class="line">   NSString *title;</div><div class="line">   NSString *author;</div><div class="line">   NSString *subject;</div><div class="line">   int   book_id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//定义一个接口，</div><div class="line">@interface SampleClass:NSObject</div><div class="line"></div><div class="line">/* function declaration */</div><div class="line">- (void) printBook:( struct Books *) book ;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">//接口的实现类</div><div class="line">@implementation SampleClass </div><div class="line">//方法打印出结构的字段</div><div class="line">- (void) printBook:( struct Books *) book</div><div class="line">&#123;</div><div class="line">//参数为指向结构的指针,所以要使用-&gt;获取变量</div><div class="line">   NSLog(@&quot;Book title : %@</div><div class="line">&quot;, book-&gt;title);</div><div class="line">   NSLog(@&quot;Book author : %@</div><div class="line">&quot;, book-&gt;author);</div><div class="line">   NSLog(@&quot;Book subject : %@</div><div class="line">&quot;, book-&gt;subject);</div><div class="line">   NSLog(@&quot;Book book_id : %d</div><div class="line">&quot;, book-&gt;book_id);</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">int main( )</div><div class="line">&#123;</div><div class="line">   struct Books Book1;        /* Declare Book1 of type Book */</div><div class="line">   struct Books Book2;        /* Declare Book2 of type Book */</div><div class="line"> </div><div class="line">   /* book 1 specification */</div><div class="line">   Book1.title = @&quot;Objective-C Programming&quot;;</div><div class="line">   Book1.author = @&quot;Nuha Ali&quot;; </div><div class="line">   Book1.subject = @&quot;Objective-C Programming Tutorial&quot;;</div><div class="line">   Book1.book_id = 6495407;</div><div class="line"></div><div class="line">   /* book 2 specification */</div><div class="line">   Book2.title = @&quot;Telecom Billing&quot;;</div><div class="line">   Book2.author = @&quot;Zara Ali&quot;;</div><div class="line">   Book2.subject = @&quot;Telecom Billing Tutorial&quot;;</div><div class="line">   Book2.book_id = 6495700;</div><div class="line"> </div><div class="line">   SampleClass *sampleClass = [[SampleClass alloc]init];</div><div class="line">   /* print Book1 info by passing address of Book1 */</div><div class="line">   [sampleClass printBook:&amp;Book1];</div><div class="line"></div><div class="line">   /* print Book2 info by passing address of Book2 */</div><div class="line">   [sampleClass printBook:&amp;Book2];</div><div class="line"></div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h4><p>位域允许在一个结构中的数据的包装。<br>也就是添加该字段所占的长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct packed_struct &#123;</div><div class="line">  unsigned int f1:1;</div><div class="line">  unsigned int f2:1;</div><div class="line">  unsigned int f3:1;</div><div class="line">  unsigned int f4:1;</div><div class="line">  unsigned int type:4;</div><div class="line">  unsigned int my_int:9;</div><div class="line">&#125; pack;</div></pre></td></tr></table></figure>
<h4 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h4><p>oc的井号（＃）开头的所有预处理命令，和java的其实很像，如#import就类似于java的import类库，还有#if,#else,等等，</p>
<h5 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h5><p>预定义宏不应该直接被修改，就是系统提供的特定方法，或者说是特定变量，如<em>DATE</em>, <em>TIME</em>等，这些方法就像java的getDate()，System.currentTimeMillis()等，都是系统提供的方法。</p>
<h5 id="预处理运算符"><a href="#预处理运算符" class="headerlink" title="预处理运算符"></a>预处理运算符</h5><p>1.宏延续()<br>    宏通常必须在一个单一的行，宏延续运算符用于继续宏的一行<br>2.Stringize(#)<br>    在宏定义内使用时，一个宏参数转换成一个字符串常量<br>3.标记粘贴(##)<br>    标记粘贴运算符在宏定义内结合两个参数，<br>4.defined()运算符</p>
<pre><code>#defined定义一个标识符，如果指定的标识符被定义，该值是真，如果符号没有定义，这个值是false
</code></pre><p>5.参数化宏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int square(int x) &#123;</div><div class="line">    return x * x;</div><div class="line">&#125;</div><div class="line">//重写</div><div class="line">#define square(x) ((x) * (x))</div></pre></td></tr></table></figure>
<p>带参数的宏，必须使用才可以使用#define指令定义。</p>
<h4 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h4><p>type关键字，可以用一个新的名字给一个类型，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//unsigned char类型，使用BYTE给该类型取一个新的名字</div><div class="line">typedef unsigned char BYTE;</div><div class="line">//使用标识符BYTE的作为unsinged char类型的缩写来定义这连个变量</div><div class="line">BYTE  b1, b2;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;OC-NSString-字符串&quot;&gt;&lt;a href=&quot;#OC-NSString-字符串&quot; class=&quot;headerlink&quot; title=&quot;OC NSString/字符串&quot;&gt;&lt;/a&gt;OC NSString/字符串&lt;/h4&gt;&lt;p&gt;1.创建NSString对象&lt;br&gt;
    
    </summary>
    
      <category term="ios" scheme="http://yoursite.com/categories/ios/"/>
    
    
      <category term="工作学习" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="oc" scheme="http://yoursite.com/tags/oc/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>oc语法学习(一)(java对比)</title>
    <link href="http://yoursite.com/2017/05/15/oc%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0(%E4%B8%80)(java%E5%AF%B9%E6%AF%94)/"/>
    <id>http://yoursite.com/2017/05/15/oc语法学习(一)(java对比)/</id>
    <published>2017-05-15T13:14:13.000Z</published>
    <updated>2017-05-16T15:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="OC程序结构"><a href="#OC程序结构" class="headerlink" title="OC程序结构"></a>OC程序结构</h4><h5 id="1-预处理命令（类似java的导入类库）"><a href="#1-预处理命令（类似java的导入类库）" class="headerlink" title="1.预处理命令（类似java的导入类库）"></a>1.预处理命令（类似java的导入类库）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;是一个预处理命令，它告诉Objective-C语言编译器去实际编译之前包含Foundation.h文件。</div></pre></td></tr></table></figure>
<h5 id="2-接口（类似java的接口）"><a href="#2-接口（类似java的接口）" class="headerlink" title="2.接口（类似java的接口）"></a>2.接口（类似java的接口）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1. @interface SampleClass:NSObject 显示了如何创建一个接口。它继承NSObject，这是所有对象的基类。</div><div class="line"></div><div class="line">2.(void)sampleMethod; shows how to declare a method.</div><div class="line"></div><div class="line">3. @end 标志着接口的结束。</div><div class="line"></div><div class="line">4. @implementation SampleClass</div><div class="line"></div><div class="line">- (void)sampleMethod&#123;</div><div class="line">   NSLog(@&quot;Hello, World! </div><div class="line">&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>差异:<br>1.java中使用interface来定义接口,接口是抽象的，并且里面的方法没有方法体，oc使用@interface来定义接口，但是oc的接口结尾要添加@end来结束<br>2.java中的继承使用extend，而oc中使用:表示继承(特定下)<br>3.java中使用implement去实现接口，而oc中使用@implementation实现接口
</strong><br><a id="more"></a></p>
<h5 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h5><h5 id="5-语句和表达式"><a href="#5-语句和表达式" class="headerlink" title="5.语句和表达式"></a>5.语句和表达式</h5><h5 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h5><h4 id="OC基本语法"><a href="#OC基本语法" class="headerlink" title="OC基本语法"></a>OC基本语法</h4><h5 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a>1.标识符</h5><p>都是由字母，数字，下划线，组成，不允许@，%标点符号，但是java能用$,而oc不能。都以字母或下划线开头。</p>
<h5 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h5><p>oc和java一样都不能作为常量或变量，或任何其他标识符名称。</p>
<h4 id="OC数据类型"><a href="#OC数据类型" class="headerlink" title="OC数据类型"></a>OC数据类型</h4><p>1.基本类型（整数类型，浮点型）<br>2.枚举类型（定义变量只能被分配在整个程序中的若干离散的整数值）<br>3.void类型（类型说明符void表示没有可用的值）<br>4.派生类型（包括指针类型，数组类型，结构类型，联合类型及函数类型）<br><strong>差异：oc和java的数据类型差异还是蛮大的，java基本数据类型分为8种（int,float,double,char,short,long,byte,boolean）,其余的是引用数据类型（类，接口，数组）</strong></p>
<h4 id="OC变量"><a href="#OC变量" class="headerlink" title="OC变量"></a>OC变量</h4><p>oc中使用extern关键字来申明一个变量，java中申明变量只需要加数据类型就好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">oc: extern int a;</div><div class="line">java: int a;</div></pre></td></tr></table></figure>
<h4 id="OC常量"><a href="#OC常量" class="headerlink" title="OC常量"></a>OC常量</h4><p>在oc中有两种简单的方法来定义常量<br>1.使用#define预处理<br>2.使用const关键字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.#define identifier value</div><div class="line">2.const type variable = value;</div></pre></td></tr></table></figure>
<p>在java中一般使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VALUE = <span class="string">"java"</span>;</div></pre></td></tr></table></figure>
<p>来定义一个常量</p>
<h4 id="OC运算符"><a href="#OC运算符" class="headerlink" title="OC运算符"></a>OC运算符</h4><p>1.算术运算符（+，-，*，/，%，++，–）<br>2.关系运算符（==,!=,&gt;,&lt;,&gt;=,&lt;=）<br>3.逻辑运算符（&amp;&amp;,||,!）<br>4.位运算符（&amp;,|,^,~）<br>5.赋值运算符（=,+=,-=,…）<br>6.其他运算符<br>类似，没什么好说的</p>
<h4 id="OC循环"><a href="#OC循环" class="headerlink" title="OC循环"></a>OC循环</h4><p>1.while循环<br>2.for循环<br>3.do…while循环<br>4.内嵌循环<br>5.break<br>6.continue<br>7.if,if…else,switch<br>类似，没什么好说的</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="1-定义一个方法"><a href="#1-定义一个方法" class="headerlink" title="1.定义一个方法"></a>1.定义一个方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (return_type) method_name:( argumentType1 )argumentName1 </div><div class="line">joiningArgument2:( argumentType2 )argumentName2 ... </div><div class="line">joiningArgumentn:( argumentTypen )argumentNamen </div><div class="line">&#123;</div><div class="line">   body of the function</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>·返回类型：</strong>方法可以返回一个值。 return_type是函数返回值的数据类型。有些方法执行所需的操作，不返回值。在这种情况下，return_type关键字是void。<br>返回类型: 方法可以返回一个值。 return_type是函数返回值的数据类型。有些方法执行所需的操作，不返回值。在这种情况下，return_type关键字是void。</p>
<p><strong>·方法名称:</strong> 这是实际的方法名。方法名和参数表共同构成的方法签名。</p>
<p><strong>·参数:</strong> 一个参数像一个占位符。当函数被调用时，你传递一个值的参数。这个值被称为实际参数或参数。参数列表是指的类型，顺序和数量的参数的方法。参数是可选的，方法可能不包含任何参数。</p>
<p><strong>·连接参数:</strong> 连接的参数，使其更易于阅读和同时调用明确。</p>
<p><strong>·方法体:</strong> 该方法的主体包含语句定义的方法用于做什么的集合。</p>
<p>在java中定义一个方法，例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1&gt;num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-按值传递参数（例：两数交换）"><a href="#2-按值传递参数（例：两数交换）" class="headerlink" title="2.按值传递参数（例：两数交换）"></a>2.按值传递参数（例：两数交换）</h5><h5 id="3-按引用方法调用参数传递（例，指针类型交换）"><a href="#3-按引用方法调用参数传递（例，指针类型交换）" class="headerlink" title="3.按引用方法调用参数传递（例，指针类型交换）"></a>3.按引用方法调用参数传递（例，指针类型交换）</h5><h4 id="OC-块"><a href="#OC-块" class="headerlink" title="OC 块"></a>OC 块</h4><h5 id="1-简单声明块语法"><a href="#1-简单声明块语法" class="headerlink" title="1.简单声明块语法"></a>1.简单声明块语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">returntype (^blockName)(argumentType);</div><div class="line">```    </div><div class="line">例</div><div class="line"> </div><div class="line">```java</div><div class="line">void (^simpleBlock)(void) = ^&#123;</div><div class="line">    NSLog(@&quot;This is a block&quot;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>调用块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">simpleBlock();</div></pre></td></tr></table></figure>
<h4 id="OC-Numbers-数字"><a href="#OC-Numbers-数字" class="headerlink" title="OC Numbers/数字"></a>OC Numbers/数字</h4><h5 id="1-NSNumber-numberWithBool-Bool-value-将bool转成NSNumber"><a href="#1-NSNumber-numberWithBool-Bool-value-将bool转成NSNumber" class="headerlink" title="1.(NSNumber *)numberWithBool:(Bool)value(将bool转成NSNumber)"></a>1.(NSNumber *)numberWithBool:(Bool)value(将bool转成NSNumber)</h5><h5 id="2-NSNumber-numberWithChar-char-value-将char转NSNumber"><a href="#2-NSNumber-numberWithChar-char-value-将char转NSNumber" class="headerlink" title="2.(NSNumber *)numberWithChar:(char)value(将char转NSNumber)"></a>2.(NSNumber *)numberWithChar:(char)value(将char转NSNumber)</h5><h5 id="3-NSNumber-numberWithDouble-double-value-将double转NSNumber"><a href="#3-NSNumber-numberWithDouble-double-value-将double转NSNumber" class="headerlink" title="3.(NSNumber *)numberWithDouble:(double)value(将double转NSNumber)"></a>3.(NSNumber *)numberWithDouble:(double)value(将double转NSNumber)</h5><h5 id="4-NSNumber-numberWithFloat-float-value-将float转NSNumber"><a href="#4-NSNumber-numberWithFloat-float-value-将float转NSNumber" class="headerlink" title="4.(NSNumber *)numberWithFloat:(float)value(将float转NSNumber)"></a>4.(NSNumber *)numberWithFloat:(float)value(将float转NSNumber)</h5><h5 id="5-NSNumber-numberWithInt-int-value（将int转NSNumber）"><a href="#5-NSNumber-numberWithInt-int-value（将int转NSNumber）" class="headerlink" title="5. (NSNumber *)numberWithInt:(int)value（将int转NSNumber）"></a>5. (NSNumber *)numberWithInt:(int)value（将int转NSNumber）</h5><h5 id="6-NSNumber-numberWithInteger-NSInteger-value-将NSInteger转NSNumber"><a href="#6-NSNumber-numberWithInteger-NSInteger-value-将NSInteger转NSNumber" class="headerlink" title="6. (NSNumber *)numberWithInteger:(NSInteger)value(将NSInteger转NSNumber)"></a>6. (NSNumber *)numberWithInteger:(NSInteger)value(将NSInteger转NSNumber)</h5><h5 id="7-BOOL-boolValue-将NSNumber转bool"><a href="#7-BOOL-boolValue-将NSNumber转bool" class="headerlink" title="7.  (BOOL)boolValue(将NSNumber转bool)"></a>7.  (BOOL)boolValue(将NSNumber转bool)</h5><h5 id="8-char-charValue-将NSNumber转char"><a href="#8-char-charValue-将NSNumber转char" class="headerlink" title="8. (char)charValue(将NSNumber转char)"></a>8. (char)charValue(将NSNumber转char)</h5><h5 id="9-double-doubleValue-将NSNumber转double"><a href="#9-double-doubleValue-将NSNumber转double" class="headerlink" title="9. (double)doubleValue(将NSNumber转double)"></a>9. (double)doubleValue(将NSNumber转double)</h5><h5 id="10-float-floatValue（将NSNumber转float）"><a href="#10-float-floatValue（将NSNumber转float）" class="headerlink" title="10. (float)floatValue（将NSNumber转float）"></a>10. (float)floatValue（将NSNumber转float）</h5><h5 id="11-NSInteger-integerValue（将NSNumber转NSInteger）"><a href="#11-NSInteger-integerValue（将NSNumber转NSInteger）" class="headerlink" title="11. (NSInteger)integerValue（将NSNumber转NSInteger）"></a>11. (NSInteger)integerValue（将NSNumber转NSInteger）</h5><h5 id="12-int-intValue-将NSNumber转int"><a href="#12-int-intValue-将NSNumber转int" class="headerlink" title="12. (int)intValue(将NSNumber转int)"></a>12. (int)intValue(将NSNumber转int)</h5><h5 id="13-NSString-stringValue-将NSNumber转NSString"><a href="#13-NSString-stringValue-将NSNumber转NSString" class="headerlink" title="13. (NSString *)stringValue(将NSNumber转NSString)"></a>13. (NSString *)stringValue(将NSNumber转NSString)</h5><h5 id="14-而在java中也是类似"><a href="#14-而在java中也是类似" class="headerlink" title="14. 而在java中也是类似"></a>14. 而在java中也是类似</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String.valueOf(<span class="keyword">int</span>);将<span class="keyword">int</span>转成String</div><div class="line">Integer.parseInt(String)将String转<span class="keyword">int</span></div></pre></td></tr></table></figure>
<p>例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">//定义一个接口</div><div class="line">@interface SampleClass:NSObject</div><div class="line">//声明一个方法，返回NSNumber类型，传入连个NSNumber类型参数</div><div class="line">- (NSNumber *)multiplyA:(NSNumber *)a withB:(NSNumber *)b;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">//接口的实现类</div><div class="line">@implementation SampleClass</div><div class="line">//抽象方法的具体实现</div><div class="line">- (NSNumber *)multiplyA:(NSNumber *)a withB:(NSNumber *)b</div><div class="line">&#123;</div><div class="line">//将NUNString转成float</div><div class="line">   float number1 = [a floatValue];</div><div class="line">   float number2 = [b floatValue];</div><div class="line">   float product = number1 * number2;</div><div class="line">   //将float转成NSNumber输出</div><div class="line">   NSNumber *result = [NSNumber numberWithFloat:product];</div><div class="line">   return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];</div><div class="line">    //创建SampleClass对象</div><div class="line">   SampleClass *sampleClass = [[SampleClass alloc]init];</div><div class="line">   //将float转NSNumber</div><div class="line">   NSNumber *a = [NSNumber numberWithFloat:10.5];</div><div class="line">   NSNumber *b = [NSNumber numberWithFloat:10.0];  </div><div class="line">   //输出相乘结果 </div><div class="line">   NSNumber *result = [sampleClass multiplyA:a withB:b];</div><div class="line">   //将结果转成NSString输出</div><div class="line">   NSString *resultString = [result stringValue];</div><div class="line">   NSLog(@"The product is %@",resultString);</div><div class="line"></div><div class="line">   [pool drain];</div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="OC-Arrays-数组"><a href="#OC-Arrays-数组" class="headerlink" title="OC Arrays/数组"></a>OC Arrays/数组</h4><h5 id="1-申明数组"><a href="#1-申明数组" class="headerlink" title="1.申明数组"></a>1.申明数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type arrayName[arraySize];</div></pre></td></tr></table></figure>
<h5 id="2-初始化数组"><a href="#2-初始化数组" class="headerlink" title="2.初始化数组"></a>2.初始化数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">double balance[5] = &#123;12,13,43,45,65&#125;;</div></pre></td></tr></table></figure>
<p>如上java类似,但是写法还是有点不同</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化</span></div><div class="line">String[] stringArray = <span class="keyword">new</span> String[];</div><div class="line"><span class="comment">//或</span></div><div class="line">String[] stringArray = &#123;<span class="string">"23"</span>,<span class="string">"12"</span>,<span class="string">"43"</span>,<span class="string">"54"</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="3-多维数组"><a href="#3-多维数组" class="headerlink" title="3.多维数组"></a>3.多维数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">二维数组，同理</div><div class="line">type arrayName[x][y]</div></pre></td></tr></table></figure>
<h5 id="4-从函数返回数组"><a href="#4-从函数返回数组" class="headerlink" title="4.从函数返回数组"></a>4.从函数返回数组</h5><p>注:在OC中不提倡地址返回一个局部变量在函数之外，所以必须将局部变量定义为静态变量，这和java很不同，java是允许直接将局部变量返回的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@implementation SampleClass</div><div class="line"></div><div class="line">/* function to generate and return random numbers */</div><div class="line">- (int *) getRandom</div><div class="line">&#123;</div><div class="line">  static int  r[10];</div><div class="line">  int i;</div><div class="line"></div><div class="line">  /* set the seed */</div><div class="line">  srand( (unsigned)time( NULL ) );</div><div class="line">  for ( i = 0; i &lt; 10; ++i)</div><div class="line">  &#123;</div><div class="line">     r[i] = rand();</div><div class="line">     NSLog( @"r[%d] = %d</div><div class="line">", i, r[i]);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return r;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="5-指针的数组"><a href="#5-指针的数组" class="headerlink" title="5.指针的数组"></a>5.指针的数组</h5><p>数组名是一个常量指针数组的第一个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">double *p;</div><div class="line">double balance[10];</div><div class="line"></div><div class="line">p = balance;</div><div class="line">p所指向的就是balance[0]的地址</div></pre></td></tr></table></figure>
<p>使用数组名作为常量指针，使用*（balance+4）是一种合法的方式访问数据balance[4]。</p>
<h4 id="OC指针"><a href="#OC指针" class="headerlink" title="OC指针"></a>OC指针</h4><p>指针是一个变量，其值是另一个变量，即直接地址的内存位置的地址。<br>使用时：<br>1.定义一个指针变量<br>int    *ip;<br>2.分配一个指针变量的地址<br>ip = &var;<br>3.访问提供的地址指针变量的值<br>例:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">//定义一个变量</div><div class="line">   int  var = 20;   /* actual variable declaration */</div><div class="line">   //申明一个指针</div><div class="line">   int  *ip;        /* yiibaier variable declaration */</div><div class="line">//将变量的地址值赋给指针</div><div class="line">   ip = &amp;var;  /* store address of var in yiibaier variable*/</div><div class="line"></div><div class="line">   NSLog(@"Address of var variable: %x</div><div class="line">", &amp;var  );</div><div class="line"></div><div class="line">   /* address stored in yiibaier variable */</div><div class="line">   NSLog(@"Address stored in ip variable: %x</div><div class="line">", ip );</div><div class="line"></div><div class="line">   /* access the value using the yiibaier */</div><div class="line">   NSLog(@"Value of *ip variable: %d</div><div class="line">", *ip );</div><div class="line"></div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>栗子中ip指向的是var的地址值，所以它们值相等都是地址值，而*ip则指向的var的值，所以它们值相等是20</p>
<h4 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h4><p>OC的指针是一个地址，它也是一个数值，因此可以在数值上的指针执行算术运算。（++，-，+，–）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ptr++//指的是地址值的递增</div><div class="line">ptr &lt;= &amp;var[Max -1] //地址值大小的比较</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">const int MAX = 3;</div><div class="line"></div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">//定义一个数组</div><div class="line">   int  var[] = &#123;10, 100, 200&#125;;</div><div class="line">//定义一个指针和局部变量</div><div class="line">   int  i, *ptr;</div><div class="line"></div><div class="line">   /* let us have address of the first element in yiibaier */</div><div class="line">   //指针指向数值的var[0]</div><div class="line">   ptr = var;</div><div class="line">   i = 0;</div><div class="line">   //如果地址值小于数值最后一个数的地址值</div><div class="line">   while ( ptr &lt;= &amp;var[MAX - 1] )</div><div class="line">   &#123;</div><div class="line"></div><div class="line">      NSLog(@"Address of var[%d] = %x</div><div class="line">", i, ptr );</div><div class="line">      NSLog(@"Value of var[%d] = %d</div><div class="line">", i, *ptr );</div><div class="line"></div><div class="line">      /* yiibai to the previous location */</div><div class="line">      //地址值++</div><div class="line">      ptr++;</div><div class="line">      i++;</div><div class="line">   &#125;</div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数组的指针"><a href="#数组的指针" class="headerlink" title="数组的指针"></a>数组的指针</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"> </div><div class="line">const int MAX = 3;</div><div class="line"> </div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">//定义一个数组</div><div class="line">   int  var[] = &#123;10, 100, 200&#125;;</div><div class="line">//定义一个数组指针</div><div class="line">   int i, *ptr[MAX];</div><div class="line"> </div><div class="line">   for ( i = 0; i &lt; MAX; i++)</div><div class="line">   &#123;</div><div class="line">   //遍历，将数组的地址值赋给数组指针</div><div class="line">      ptr[i] = &amp;var[i]; /* assign the address of integer. */</div><div class="line">   &#125;</div><div class="line">   for ( i = 0; i &lt; MAX; i++)</div><div class="line">   &#123;</div><div class="line">   //遍历打印出数组指针每个地址对应的数值</div><div class="line">      NSLog(@&quot;Value of var[%d] = %d</div><div class="line">&quot;, i, *ptr[i] );</div><div class="line">   &#125;</div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"> </div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">//定义一个变量</div><div class="line">   int  var;</div><div class="line">//定义一个指针</div><div class="line">   int  *ptr;</div><div class="line">//定义一个指向int类型指针的指针</div><div class="line">   int  **pptr;</div><div class="line">//赋值</div><div class="line">   var = 3000;</div><div class="line">//赋地址值</div><div class="line">   /* take the address of var */</div><div class="line">   ptr = &amp;var;</div><div class="line"></div><div class="line">   /* take the address of ptr using address of operator &amp; */</div><div class="line">//将int指针的地址值赋给pptr</div><div class="line">   pptr = &amp;ptr;</div><div class="line"></div><div class="line">   /* take the value using pptr */</div><div class="line">   NSLog(@&quot;Value of var = %d</div><div class="line">&quot;, var );</div><div class="line">   NSLog(@&quot;Value available at *ptr = %d</div><div class="line">&quot;, *ptr );</div><div class="line">   NSLog(@&quot;Value available at **pptr = %d</div><div class="line">&quot;, **pptr);</div><div class="line"></div><div class="line">   return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>C语音的指针还是很强大的，虽然之前学过，但是感觉忘的都差不多了，再次重温，收获颇多。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;OC程序结构&quot;&gt;&lt;a href=&quot;#OC程序结构&quot; class=&quot;headerlink&quot; title=&quot;OC程序结构&quot;&gt;&lt;/a&gt;OC程序结构&lt;/h4&gt;&lt;h5 id=&quot;1-预处理命令（类似java的导入类库）&quot;&gt;&lt;a href=&quot;#1-预处理命令（类似java的导入类库）&quot; class=&quot;headerlink&quot; title=&quot;1.预处理命令（类似java的导入类库）&quot;&gt;&lt;/a&gt;1.预处理命令（类似java的导入类库）&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;是一个预处理命令，它告诉Objective-C语言编译器去实际编译之前包含Foundation.h文件。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2-接口（类似java的接口）&quot;&gt;&lt;a href=&quot;#2-接口（类似java的接口）&quot; class=&quot;headerlink&quot; title=&quot;2.接口（类似java的接口）&quot;&gt;&lt;/a&gt;2.接口（类似java的接口）&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1. @interface SampleClass:NSObject 显示了如何创建一个接口。它继承NSObject，这是所有对象的基类。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.(void)sampleMethod; shows how to declare a method.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3. @end 标志着接口的结束。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4. @implementation SampleClass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)sampleMethod&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   NSLog(@&amp;quot;Hello, World! &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@end&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;差异:&lt;br&gt;1.java中使用interface来定义接口,接口是抽象的，并且里面的方法没有方法体，oc使用@interface来定义接口，但是oc的接口结尾要添加@end来结束&lt;br&gt;2.java中的继承使用extend，而oc中使用:表示继承(特定下)&lt;br&gt;3.java中使用implement去实现接口，而oc中使用@implementation实现接口
&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ios" scheme="http://yoursite.com/categories/ios/"/>
    
    
      <category term="工作学习" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="oc" scheme="http://yoursite.com/tags/oc/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>fragment懒加载</title>
    <link href="http://yoursite.com/2017/05/14/fragment%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/05/14/fragment懒加载/</id>
    <published>2017-05-14T14:59:26.000Z</published>
    <updated>2017-05-15T12:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　今天在github上看了一些tablayout的类库，如<a href="https://github.com/H07000223/FlycoTabLayout" target="_blank" rel="external">FlycoTabLayout</a>，<a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">SmartTabLayout</a>等，都是star比较靠前的类库。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTabData</span><span class="params">(ArrayList&lt;CustomTabEntity&gt; tabEntitys, FragmentManager fm, <span class="keyword">int</span> containerViewId, ArrayList&lt;Fragment&gt; fragments)</span></span></div></pre></td></tr></table></figure>
<p>像这个是FlycoTabLayout的设置tab数据的方法，里面直接传了一个fragment的集合，说明这些集合里的framgment对象都是先new出来的，然后再放到一个集合中作为参数传到了setTabData方法中，若我们没有对这些framgent页面做处理，相当于当我们加载了第一个fragment时，也就相当于加载了其他的fragment界面了，但是，现在大部分的app，并不希望你进到主页后，就将其他的framgment都加载好了，而是当你第一次点击其他的fragment页面时，才去加载网络拉取数据，这便是我们所说的懒加载（网上很多人称为Fragment的最优加载）。一般我们会fragment结合viewpager使用，viewpager通常会有预加载机制，默认情况下会先加载左右一页的数据，所以想要等待页面可见的时候再去加载网络数据，那么fragment的懒加载是必不可少的解决方案。</p>
<a id="more"></a>
<p>　　那么该怎么实现呢，就在于要重写Framgent类的一个方法setUserVisibleHint(boolean isVisibleToUser)，这个方法字面意思就是设置用户可见隐藏，里面传一个boolean类型的参数——表示当前界面可见或者不可见，这个方法在Fragment界面切换到可见或者不可见的时候调用，其次我们希望对每一个Framgent都这样处理，所以我们将其写在BaseFragment中,先上代码。<br>　　<strong>大坑:虽然这个方法是如此，并且官方也给出了解释，但是如果你只是几个framgent的切换，并没有使用到viewpager，该方法是并不会调用的，今天也测试了确实是如此。只有当你结合viewpager使用时，fragment的切换才会调用该方法 </strong> </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    * @param isVisibleToUser true if this fragment's UI is currently visible to the user (default),</div><div class="line">*                        false if it is not.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isViewInitiated;  <span class="comment">//view是否加载，默认false</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isVisibleToUser;  <span class="comment">//是否用户可见,默认false</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isDataInitiated;  <span class="comment">//数据是否加载,默认false</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        <span class="comment">//view加载成功</span></div><div class="line">        isViewInitiated = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//准备加载数据</span></div><div class="line">        prepareFetchData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">        <span class="keyword">this</span>.isVisibleToUser = isVisibleToUser;</div><div class="line">        <span class="comment">//准备加载数据</span></div><div class="line">        prepareFetchData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//加载数据，抽象方法，具体子类实现</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareFetchData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//判断如果用户可见，view加载成功，数据未加载</span></div><div class="line">        <span class="keyword">if</span> (isVisibleToUser &amp;&amp; isViewInitiated &amp;&amp; !isDataInitiated) &#123;</div><div class="line">            <span class="comment">//加载数据</span></div><div class="line">            fetchData();</div><div class="line">            <span class="comment">//数据加载成功</span></div><div class="line">            isDataInitiated = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　1.在onActivityCreated()方法中（该方法在Activity的onCreate()方法之前调用，可以获取除了View之外的资源,并且在Framgent的onCreate(),onCreateView()方法之后调用，所以调用该方法时，view已加载成功）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">    isViewInitiated = <span class="keyword">true</span>; <span class="comment">//view加载成功</span></div><div class="line">    prepareFetchData();<span class="comment">//预加载数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　2.在prepareFetchData()方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepareFetchData</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//如果页面可见且view加载成功且数据还未加载</span></div><div class="line">     <span class="keyword">if</span> (isVisibleToUser &amp;&amp; isViewInitiated &amp;&amp; !isDataInitiated) &#123;</div><div class="line">     <span class="comment">//若以上三者条件都满足，则开始加载数据</span></div><div class="line">         fetchData();</div><div class="line">         <span class="comment">//数据加载成功标志</span></div><div class="line">         isDataInitiated = <span class="keyword">true</span>;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>　　3.在第一次调用onActivityCreated()方法，此时isViewInitiated为true,表示view已加载，但是只满足了两个条件（view加载完成，数据未加载），但是要知道setUserVisibleHint()方法是在fragment页面切换的时候才调用的，所以当页面切换时，isVisibleToUser才为true,这时再调用prepareFetchData()方法，三个条件都满足，调用fetchData()方法，该方法我们设置为抽象，子类实现该方法真正加载数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>　　到此，就是framgent的懒加载的实现，也许这也是对立的，当存在预加载时，就可以使用懒加载来处理数据加载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　今天在github上看了一些tablayout的类库，如&lt;a href=&quot;https://github.com/H07000223/FlycoTabLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlycoTabLayout&lt;/a&gt;，&lt;a href=&quot;https://github.com/ogaclejapan/SmartTabLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SmartTabLayout&lt;/a&gt;等，都是star比较靠前的类库。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setTabData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ArrayList&amp;lt;CustomTabEntity&amp;gt; tabEntitys, FragmentManager fm, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; containerViewId, ArrayList&amp;lt;Fragment&amp;gt; fragments)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;像这个是FlycoTabLayout的设置tab数据的方法，里面直接传了一个fragment的集合，说明这些集合里的framgment对象都是先new出来的，然后再放到一个集合中作为参数传到了setTabData方法中，若我们没有对这些framgent页面做处理，相当于当我们加载了第一个fragment时，也就相当于加载了其他的fragment界面了，但是，现在大部分的app，并不希望你进到主页后，就将其他的framgment都加载好了，而是当你第一次点击其他的fragment页面时，才去加载网络拉取数据，这便是我们所说的懒加载（网上很多人称为Fragment的最优加载）。一般我们会fragment结合viewpager使用，viewpager通常会有预加载机制，默认情况下会先加载左右一页的数据，所以想要等待页面可见的时候再去加载网络数据，那么fragment的懒加载是必不可少的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="懒加载" scheme="http://yoursite.com/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="fragment" scheme="http://yoursite.com/tags/fragment/"/>
    
  </entry>
  
  <entry>
    <title>github开源项目推荐</title>
    <link href="http://yoursite.com/2017/05/12/github%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/"/>
    <id>http://yoursite.com/2017/05/12/github开源项目推荐/</id>
    <published>2017-05-12T01:35:12.000Z</published>
    <updated>2017-05-14T16:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将自己觉得好的开源项目都放这里面了，会一直持续更新"><a href="#将自己觉得好的开源项目都放这里面了，会一直持续更新" class="headerlink" title="将自己觉得好的开源项目都放这里面了，会一直持续更新"></a>将自己觉得好的开源项目都放这里面了，会一直持续更新</h3><a id="more"></a>
<h4 id="2017-05-12"><a href="#2017-05-12" class="headerlink" title="2017.05.12"></a>2017.05.12</h4><h5 id="AndroidUtilCode"><a href="#AndroidUtilCode" class="headerlink" title="AndroidUtilCode"></a><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="external">AndroidUtilCode</a></h5><p>一个非常强大的android工具类，里面几乎涵盖了开发中所需的所有工具类。</p>
<h5 id="RippleEffect"><a href="#RippleEffect" class="headerlink" title="RippleEffect"></a><a href="https://github.com/patrickpissurno/RippleEffect/" target="_blank" rel="external">RippleEffect</a></h5><p>水波纹效果，已向下兼容至API9，基本都通用,看issues反馈说android6.0或7.0以上会崩溃，作者回复说已修复，已测试6.0无问题。</p>
<h4 id="2017-05-14"><a href="#2017-05-14" class="headerlink" title="2017.05.14"></a>2017.05.14</h4><h5 id="android-percent-support-extend"><a href="#android-percent-support-extend" class="headerlink" title="android-percent-support-extend"></a><a href="https://github.com/hongyangAndroid/android-percent-support-extend" target="_blank" rel="external">android-percent-support-extend</a></h5><p>鸿洋的百分比布局,越用越觉得实用，不管是高分辨率的机型还是低分辨的机型，一套搞定。</p>
<h5 id="BaseRecyclerViewAdapterHelper"><a href="#BaseRecyclerViewAdapterHelper" class="headerlink" title="BaseRecyclerViewAdapterHelper"></a><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="external">BaseRecyclerViewAdapterHelper</a></h5><p>Recyclerview的BaseAdapter,高度封装，和原始的adpter相比，减少70%的代码量，能实现的功能基本都实现，可扩展，还有源码分析可学习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;将自己觉得好的开源项目都放这里面了，会一直持续更新&quot;&gt;&lt;a href=&quot;#将自己觉得好的开源项目都放这里面了，会一直持续更新&quot; class=&quot;headerlink&quot; title=&quot;将自己觉得好的开源项目都放这里面了，会一直持续更新&quot;&gt;&lt;/a&gt;将自己觉得好的开源项目都放这里面了，会一直持续更新&lt;/h3&gt;
    
    </summary>
    
      <category term="github" scheme="http://yoursite.com/categories/github/"/>
    
    
      <category term="工作学习" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="开源" scheme="http://yoursite.com/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>android热修复实践</title>
    <link href="http://yoursite.com/2017/05/11/android%E7%83%AD%E4%BF%AE%E5%A4%8D%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/05/11/android热修复实践/</id>
    <published>2017-05-11T05:36:12.000Z</published>
    <updated>2017-05-14T16:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是热修复"><a href="#什么是热修复" class="headerlink" title="什么是热修复"></a>什么是热修复</h3><p>　　我们知道按照现有的模式，一旦我们上线的app版本有了bug，我们不得不先解决bug，然后测试无误后，重新打包，然后再发布到应用市场上去，这一系列的操作，不仅浪费时间，而且也影响用户的体验，若能像web端一样，更改了代码就能立马生效，那般轻松也正是开发者有朝一日所希望的。现如今Android插件化热更新技术非常火热，也开源了很多的项目如Dexposed,AndFix,ClassLoader,nuwa等等。说来说去，热修复的作用就是可以动态的修复你的bug，一旦有bug要修复，就可以通过事先的接口从网上下载无bug的代码来替换有bug的代码，这样就省事多了，用户体验也好。</p>
<a id="more"></a>
<p>　</p>
<h3 id="热修复的原理"><a href="#热修复的原理" class="headerlink" title="热修复的原理"></a>热修复的原理</h3><p>　　Android的类加载机制分为两种，PathClassLoader（用来加载系统类和应用类）和DexClassLoader（用来加载jar，apk，dex文件，加载jar，apk也是最终抽取里面的Dex文件进行加载），并且他们都继承BaseDexClassLoader。<br>1.看下pathClassLoader代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, <span class="keyword">null</span>, parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String libraryPath,</span></span></div><div class="line">            ClassLoader parent) &#123;</div><div class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, libraryPath, parent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.DexClassLoader代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory, String libraryPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">new</span> File(optimizedDirectory), libraryPath, parent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　两个ClassLoader就两三行代码，只是调用了父类的构造函数</p>
<p>3.BaseDexClassLoader代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,</span></span></div><div class="line">            String libraryPath, ClassLoader parent) &#123;</div><div class="line">        <span class="keyword">super</span>(parent);</div><div class="line">        <span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexPath, libraryPath, optimizedDirectory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</div><div class="line">        Class c = pathList.findClass(name, suppressedExceptions);</div><div class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</div><div class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</div><div class="line">                cnfe.addSuppressed(t);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> cnfe;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>　　在BaseDexClassLoader构造函数中创建一个DexPathList类的实例，这个DexPathList的构造函数会创建一个dexElements数组</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DexPathList</span><span class="params">(ClassLoader definingContext, String dexPath, String libraryPath, File optimizedDirectory)</span> </span>&#123;</div><div class="line">        ... </div><div class="line">        <span class="keyword">this</span>.definingContext = definingContext;</div><div class="line">        ArrayList&lt;IOException&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;IOException&gt;();</div><div class="line">        <span class="comment">//创建一个数组</span></div><div class="line">        <span class="keyword">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory, suppressedExceptions);</div><div class="line">        ... </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>　　然后BaseDexClassLoader重写了findClass方法，调用了pathList.findClass，跳到DexPathList类中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* package */</span><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</div><div class="line">            <span class="comment">//遍历该数组</span></div><div class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</div><div class="line">            <span class="comment">//初始化DexFile</span></div><div class="line">            DexFile dex = element.dexFile;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//调用DexFile类的loadClassBinaryName方法返回Class实例</span></div><div class="line">                Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> clazz;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;       </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　会遍历这个数组，然后初始化DexFile，如果DexFile不为空那么久调用DexFile类的loadClassBinaryName方法返回Class实例，<strong>总结就是ClassLoader会遍历这个数组，然后加载这个数组中的dex文件，而ClassLoader在加载了正确的类后，就不会去加载有bug的那个类了，我们把这个正确的类放在Dex文件中，让这个Dex文件排在dexElements数组前面即可。</strong></p>
<h3 id="AndFix实践"><a href="#AndFix实践" class="headerlink" title="AndFix实践"></a>AndFix实践</h3><p>　　最近我刚在公司的一个项目中添加了热修复，使用的是阿里的AndFix.<br>　　AndFix支持Android2.3到7.0版本，并且支持arm和x86系统架构的设备,完美支持Dalvik和ART的Runtime。</p>
<h4 id="AndFix原理"><a href="#AndFix原理" class="headerlink" title="AndFix原理"></a>AndFix原理</h4><p><img src="http://opn79542e.bkt.clouddn.com/AndFix原理.png" alt="AndFix原理"><br>　　他的原理如图所示，就是方法替换，把有bug的方法替换成补丁文件中的方法。</p>
<p>方法替换过程:<img src="http://opn79542e.bkt.clouddn.com/andFix方法替换过程.png" alt="andFix方法替换过程"></p>
<h4 id="AndFix使用"><a href="#AndFix使用" class="headerlink" title="AndFix使用"></a>AndFix使用</h4><p>1.首先我们要添加AndFix依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	compile <span class="string">'com.alipay.euler:andfix:0.5.0@aar'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.在Application中初始化PatchMannger</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * init 热修复</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPatchManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    mPatchManager = <span class="keyword">new</span> PatchManager(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//注意每次appversion变更都会导致所有补丁被删除,如果appversion没有改变，则会加载已经保存的所有补丁。</span></div><div class="line">    mPatchManager.init(appversion);<span class="comment">//current version</span></div><div class="line">    mPatchManager.loadPatch();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>appVersion获取方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 获取版本号</div><div class="line">   *</div><div class="line">   * <span class="doctag">@return</span> 当前应用的版本号</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getVersion</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          PackageManager manager = context.getPackageManager();</div><div class="line">          PackageInfo info = manager.getPackageInfo(context.getPackageName(), <span class="number">0</span>);</div><div class="line">          <span class="keyword">return</span> info.versionName;</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">          <span class="keyword">return</span> context.getString(R.string.can_not_find_version_name);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>3.打包一个修复了bug的同版本号的apk</p>
<p>4.使用官方提供的工具<a href="https://github.com/alibaba/AndFix/blob/master/tools/apkpatch-1.0.3.zip" target="_blank" rel="external">apkpatch</a>生成.apatch补丁文件<br>点击上面的链接下载apkpatch之后解压</p>
<p>5.将两个apk文件和该app的签名文件放入到该目录中</p>
<p>6.通过命令行进入到该目录下，然后使用命令行<br>apkpatch.bat -f 新apk -t 旧apk -o 输出目录 -k app签名文件 -p 签名文件密码 -a 签名文件别名 -e 别名密码</p>
<p>7.在输出目录下就有一个.aptch文件，这个文件就apatch补丁文件，改名为fix.apatch(随意)</p>
<p>8.在公司的项目中，我使用的是通过推送将该补丁文件推送到用户本地去，然后通过自动下载来更新bug。我们使用的推送是集成个推，个推推送的透传消息，就可以传json键值对，以下就是我的PushBean实体类中的字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String type;        <span class="comment">//类型</span></div><div class="line">   <span class="keyword">private</span> String extra;       <span class="comment">//额外参数</span></div><div class="line">   <span class="keyword">private</span> String content;     <span class="comment">//title内容</span></div><div class="line">   <span class="keyword">private</span> String app_v;    <span class="comment">//应用的版本</span></div><div class="line">   <span class="keyword">private</span> String path_v;   <span class="comment">//补丁的版本</span></div><div class="line">   <span class="keyword">private</span> String url;  <span class="comment">//补丁的下载地址</span></div></pre></td></tr></table></figure>
<p>9.当收到透传消息，判断type类型，如果type等于apatch，则说明需要热更新修复了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (pushBean != <span class="keyword">null</span> &amp;&amp; <span class="string">"apatch"</span>.equals(pushBean.getType())) &#123;    <span class="comment">//热修复</span></div><div class="line">             <span class="comment">//判断当前版本是否有补丁需要下载更新</span></div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 RepairBugUtil.getInstance().comparePath(<span class="keyword">this</span>, pushBean);</div><div class="line">             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                 e.printStackTrace();</div><div class="line">             &#125;</div><div class="line">         &#125;</div></pre></td></tr></table></figure>
<p>10.判断当前的版本是否有补丁需要下载更新，如果服务器端的应用版本和本地的应用版本一样，但是补丁版本（版本自己定，不一样即可）不一样，则需要下载更新</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">     * 比较本地版本和补丁版本</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> RemoteBean</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comparePath</span><span class="params">(Context context, PushBean RemoteBean)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String pathInfo = (String) SharedPreferencesUtils.getParam(context, AppConstants.PATH_INFO, <span class="string">""</span>);</div><div class="line">        PushBean localBean = <span class="keyword">new</span> Gson().fromJson(pathInfo, PushBean.class);</div><div class="line">        <span class="comment">//远程的应用版本跟当前应用的版本比较</span></div><div class="line">        <span class="keyword">if</span> (ValidateUtil.getVersion(context).equals(RemoteBean.getApp_v())) &#123;</div><div class="line">            <span class="comment">//远程的应用版本跟本地保存的应用版本一样，但补丁不一样，则需要下载重新</span></div><div class="line">            <span class="comment">/**</span></div><div class="line">             *第一种情况：当本地记录的Bean为空的时候（刚安装的时候可能为空）并且远程的Bean的path_v不为空的时候需要下载补丁。</div><div class="line">             * 第二种情况：当本地记录的path_v和远程Bean的path_v不一样的时候需要下载补丁。</div><div class="line">             */</div><div class="line">            <span class="keyword">if</span> (localBean == <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(RemoteBean.getPath_v())</div><div class="line">                    || localBean.getApp_v().equals(RemoteBean.getApp_v()) &amp;&amp;</div><div class="line">                    !localBean.getPath_v().equals(RemoteBean.getPath_v())) &#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">new</span> File(AppConstants.APATCH_DIR).exists()) &#123;</div><div class="line">                    <span class="keyword">new</span> File(AppConstants.APATCH_DIR).mkdirs();<span class="comment">// 创建存储目录</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">//下载补丁文件</span></div><div class="line">                downloadAndLoad(RemoteBean, AppConstants.URL_PREFIX + RemoteBean.getUrl());</div><div class="line">                String json = <span class="keyword">new</span> Gson().toJson(RemoteBean);</div><div class="line">              <span class="comment">//将pushbean对象转成json格式保存，以便下次使用</span></div><div class="line">SharedPreferencesUtils.setParam(context, AppConstants.PATH_INFO, json);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>11.下载补丁文件，在项目中使用的是Nohttp，该网络请求框架非常的方便，并且都实现了对进度的监听，所以如果你的项目中需要下载或上传很多文件，推荐使用Nohttp。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadAndLoad</span><span class="params">(PushBean bean, String downloadUrl)</span> </span>&#123;</div><div class="line"><span class="comment">//创建下载队列</span></div><div class="line">    DownloadQueue downloadQueue = NoHttp.newDownloadQueue();</div><div class="line">    DownloadRequest downloadRequest = NoHttp.createDownloadRequest(downloadUrl, AppConstants.APATCH_DIR, bean.getUrl(), <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">    <span class="comment">//将下载任务添加进队列中</span></div><div class="line">    downloadQueue.add(<span class="number">0</span>, downloadRequest, downloadListener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>12.创建DownLoadListener监听，在文件下载完后，就可以<br>调用全局的PatchManager对象通过addPatch方法来加载该文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> DownloadListener downloadListener = <span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadError</span><span class="params">(<span class="keyword">int</span> what, Exception exception)</span> </span>&#123;</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">boolean</span> resume, <span class="keyword">long</span> preLenght, Headers header, <span class="keyword">long</span> count)</span> </span>&#123;</div><div class="line">           <span class="comment">// 下载开始</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">int</span> progress, <span class="keyword">long</span> downCount, <span class="keyword">long</span> speed)</span> </span>&#123;</div><div class="line">           <span class="comment">// 更新下载进度和下载网速</span></div><div class="line">           Log.e(TAG, progress + <span class="string">""</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(<span class="keyword">int</span> what, String filePath)</span> </span>&#123;</div><div class="line">           <span class="comment">// 下载完成</span></div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="comment">// .apatch file path</span></div><div class="line">               App.mPatchManager.addPatch(filePath);</div><div class="line">               Log.d(TAG, <span class="string">"apatch:"</span> + filePath + <span class="string">" added."</span>);</div><div class="line">               <span class="comment">//复制且加载补丁成功后，删除下载的补丁</span></div><div class="line">               File f = <span class="keyword">new</span> File(filePath);</div><div class="line">               <span class="keyword">if</span> (f.exists()) &#123;</div><div class="line">                   <span class="keyword">boolean</span> result = <span class="keyword">new</span> File(filePath).delete();</div><div class="line">                   <span class="keyword">if</span> (!result)</div><div class="line">                       Log.e(TAG, filePath + <span class="string">" delete fail"</span>);</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">               Log.e(TAG, <span class="string">""</span>, e);</div><div class="line">           &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</div><div class="line">           <span class="comment">// 下载被取消或者暂停</span></div><div class="line">       &#125;</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
<p>13.到此，补丁文件被加载后，bug就修复了，就是这么简单,最后附上RepairBugUtil工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepairBugUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"AndFix"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RepairBugUtil INSTANCE = <span class="keyword">new</span> RepairBugUtil();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RepairBugUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadAndLoad</span><span class="params">(PushBean bean, String downloadUrl)</span> </span>&#123;</div><div class="line">        DownloadQueue downloadQueue = NoHttp.newDownloadQueue();</div><div class="line">        DownloadRequest downloadRequest = NoHttp.createDownloadRequest(downloadUrl, AppConstants.APATCH_DIR, bean.getUrl(), <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">        downloadQueue.add(<span class="number">0</span>, downloadRequest, downloadListener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 比较本地版本和补丁版本</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> RemoteBean</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comparePath</span><span class="params">(Context context, PushBean RemoteBean)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String pathInfo = (String) SharedPreferencesUtils.getParam(context, AppConstants.PATH_INFO, <span class="string">""</span>);</div><div class="line">        PushBean localBean = <span class="keyword">new</span> Gson().fromJson(pathInfo, PushBean.class);</div><div class="line">        <span class="comment">//远程的应用版本跟当前应用的版本比较</span></div><div class="line">        <span class="keyword">if</span> (ValidateUtil.getVersion(context).equals(RemoteBean.getApp_v())) &#123;</div><div class="line">            <span class="comment">//远程的应用版本跟本地保存的应用版本一样，但补丁不一样，则需要下载重新</span></div><div class="line">            <span class="comment">/**</span></div><div class="line">             *第一种情况：当本地记录的Bean为空的时候（刚安装的时候可能为空）并且远程的Bean的path_v不为空的时候需要下载补丁。</div><div class="line">             * 第二种情况：当本地记录的path_v和远程Bean的path_v不一样的时候需要下载补丁。</div><div class="line">             */</div><div class="line">            <span class="keyword">if</span> (localBean == <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(RemoteBean.getPath_v())</div><div class="line">                    || localBean.getApp_v().equals(RemoteBean.getApp_v()) &amp;&amp;</div><div class="line">                    !localBean.getPath_v().equals(RemoteBean.getPath_v())) &#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">new</span> File(AppConstants.APATCH_DIR).exists()) &#123;</div><div class="line">                    <span class="keyword">new</span> File(AppConstants.APATCH_DIR).mkdirs();<span class="comment">// 创建存储目录</span></div><div class="line">                &#125;</div><div class="line">                downloadAndLoad(RemoteBean, AppConstants.URL_PREFIX + RemoteBean.getUrl());</div><div class="line">                String json = <span class="keyword">new</span> Gson().toJson(RemoteBean);</div><div class="line">                SharedPreferencesUtils.setParam(context, AppConstants.PATH_INFO, json);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DownloadListener downloadListener = <span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadError</span><span class="params">(<span class="keyword">int</span> what, Exception exception)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">boolean</span> resume, <span class="keyword">long</span> preLenght, Headers header, <span class="keyword">long</span> count)</span> </span>&#123;</div><div class="line">            <span class="comment">// 下载开始</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">int</span> progress, <span class="keyword">long</span> downCount, <span class="keyword">long</span> speed)</span> </span>&#123;</div><div class="line">            <span class="comment">// 更新下载进度和下载网速</span></div><div class="line">            Log.e(TAG, progress + <span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(<span class="keyword">int</span> what, String filePath)</span> </span>&#123;</div><div class="line">            <span class="comment">// 下载完成</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// .apatch file path</span></div><div class="line">                App.mPatchManager.addPatch(filePath);</div><div class="line">                Log.d(TAG, <span class="string">"apatch:"</span> + filePath + <span class="string">" added."</span>);</div><div class="line">                <span class="comment">//复制且加载补丁成功后，删除下载的补丁</span></div><div class="line">                File f = <span class="keyword">new</span> File(filePath);</div><div class="line">                <span class="keyword">if</span> (f.exists()) &#123;</div><div class="line">                    <span class="keyword">boolean</span> result = <span class="keyword">new</span> File(filePath).delete();</div><div class="line">                    <span class="keyword">if</span> (!result)</div><div class="line">                        Log.e(TAG, filePath + <span class="string">" delete fail"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                Log.e(TAG, <span class="string">""</span>, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</div><div class="line">            <span class="comment">// 下载被取消或者暂停</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AndFix优缺点"><a href="#AndFix优缺点" class="headerlink" title="AndFix优缺点"></a>AndFix优缺点</h4><p>　　最后由于AndFix采用native hook的方式，这套方案直接使用dalvik_replaceMethod替换class中方法的实现。由于它并没有整体替换class, 而field在class中的相对地址在class加载时已确定，所以AndFix无法支持新增或者删除filed的情况(通过替换init与clinit只可以修改field的数值)。</p>
<p><img src="http://opn79542e.bkt.clouddn.com/AndFix缺点.jpg" alt="AndFix缺点"><br>　　也正因如此，Andfix可以支持的补丁场景相对有限，仅仅可以使用它来修复特定问题。结合之前的发布流程，我们更希望补丁对开发者是不感知的，即他不需要清楚这个修改是对补丁版本还是正式发布版本(事实上我们也是使用git分支管理+cherry-pick方式)。另一方面，使用native替换将会面临比较复杂的兼容性问题。<br><img src="http://opn79542e.bkt.clouddn.com/AndFixCompare.png" alt="AndFixCompare"><br><img src="http://opn79542e.bkt.clouddn.com/AndFix.jpg" alt="AndFix"></p>
<p>　　相比其他方案，AndFix的最大优点在于立即生效。事实上，AndFix的实现与Instant Run的热插拔有点类似，但是由于使用场景的限制，微信在最初期已排除使用这一方案。</p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a></p>
<p><a href="https://github.com/yanzhenjie/NoHttp" target="_blank" rel="external">NoHttp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是热修复&quot;&gt;&lt;a href=&quot;#什么是热修复&quot; class=&quot;headerlink&quot; title=&quot;什么是热修复&quot;&gt;&lt;/a&gt;什么是热修复&lt;/h3&gt;&lt;p&gt;　　我们知道按照现有的模式，一旦我们上线的app版本有了bug，我们不得不先解决bug，然后测试无误后，重新打包，然后再发布到应用市场上去，这一系列的操作，不仅浪费时间，而且也影响用户的体验，若能像web端一样，更改了代码就能立马生效，那般轻松也正是开发者有朝一日所希望的。现如今Android插件化热更新技术非常火热，也开源了很多的项目如Dexposed,AndFix,ClassLoader,nuwa等等。说来说去，热修复的作用就是可以动态的修复你的bug，一旦有bug要修复，就可以通过事先的接口从网上下载无bug的代码来替换有bug的代码，这样就省事多了，用户体验也好。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="热修复" scheme="http://yoursite.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="AndFix" scheme="http://yoursite.com/tags/AndFix/"/>
    
      <category term="工作学习" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[转]没有效率的勤奋,是傻</title>
    <link href="http://yoursite.com/2017/05/10/%E8%BD%AC-%E6%B2%A1%E6%9C%89%E6%95%88%E7%8E%87%E7%9A%84%E5%8B%A4%E5%A5%8B-%E6%98%AF%E5%82%BB/"/>
    <id>http://yoursite.com/2017/05/10/转-没有效率的勤奋-是傻/</id>
    <published>2017-05-09T16:08:31.000Z</published>
    <updated>2017-05-11T02:26:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　很多人说，为什么我很勤奋，一直忙于工作、学习，却还是没有进步？</p>
<p><strong>有可能你的勤奋是无用功。</strong></p>
 <a id="more"></a>
<p>　　读书的时候，我们发现，学霸们很聪明，但往往不是最勤奋的那个。他们无需花100%的时间学习，但因为学习效率高，一小时顶别人五小时，所以成绩好。而有的人花了200%的时间，勤奋得不睡觉，却还是赶不上他。</p>
<p>　　蒂姆·费瑞斯在《每周工作4小时》中重新更正了“勤奋”的含义。</p>
<p>　　他指出了勤奋和效率的重要区别，那些整天忙碌的人，事实上可能是以牺牲有效性为代价而维持勤奋状态的。正确的做法是，你的目标应该是富有成效——即你所做的事情必须能够让你更加接近你的目标。</p>
<p>　　可见，效率才是最重要的。<br> 　<br>　　人的竞争，也是效率之争。你能不能管好自己？管好自己不是每天不断读书，而是单位时间的产出更高。一年读了500本书的人，长进未必高过读对了5本书的人。</p>
<p><strong>所以劳逸结合，该玩时开心的玩，该工作该学习时有效率的学习。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　很多人说，为什么我很勤奋，一直忙于工作、学习，却还是没有进步？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有可能你的勤奋是无用功。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="鸡汤" scheme="http://yoursite.com/categories/%E9%B8%A1%E6%B1%A4/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="杂想" scheme="http://yoursite.com/tags/%E6%9D%82%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客的更新优化 </title>
    <link href="http://yoursite.com/2017/05/09/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9B%B4%E6%96%B0%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/05/09/hexo博客的更新优化/</id>
    <published>2017-05-09T15:54:25.000Z</published>
    <updated>2017-05-11T02:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="之后对博客界面，动画等的更新及优化就都写在这篇里面了。"><a href="#之后对博客界面，动画等的更新及优化就都写在这篇里面了。" class="headerlink" title="之后对博客界面，动画等的更新及优化就都写在这篇里面了。"></a>之后对博客界面，动画等的更新及优化就都写在这篇里面了。</h3><p>本人目前使用的主题是Hexo-NexT,所以想要配置一些相关的设置只要去其官网就行了，<a href="http://theme-next.iissnan.com" target="_blank" rel="external">点我跳转</a></p>
<p>另外再附上MarkDown的语法入门（Mou）,确实格式好看了很多<a href="http://www.jianshu.com/p/0130ad32a08d" target="_blank" rel="external">点我跳转</a></p>
<a id="more"></a>
<h4 id="2017-05-09"><a href="#2017-05-09" class="headerlink" title="2017.05.09"></a>2017.05.09</h4><p>1.添加了点击页面，有❤️飘出的动画<br>2.添加了页面背景的动态效果<br>以上相关设置<a href="http://wanzhiyu.tk/2017/01/20/教程/Hexo/Hexo-Next的背景动态效果和心心/" target="_blank" rel="external">点我跳转</a>  </p>
<p>3.设置腾讯公益404页面<br>4.设置站点建立时间<br>以上相关设置<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">点我跳转</a></p>
<p>5.添加阅读次数统计（leanCloud）<br>以上相关设置<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">点我跳转</a></p>
<p>6.设置头像 在主题的_config.xml中搜索avatar,头像的图片我是存储在七牛云上的，然后将头像的地址替换就好了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avatar: http://opn79542e.bkt.clouddn.com/a.jpg</div></pre></td></tr></table></figure>
<h4 id="2017-05-10"><a href="#2017-05-10" class="headerlink" title="2017.05.10"></a>2017.05.10</h4><p>1.使用MWeb代替Mou编写MarkDown,替换了之后感觉Mou很垃圾，并且MWeb有个很棒的功能，可以直接将服务器绑定（如七牛云）,然后想显示图片直接拖到编辑器里面，点击右上角的upload image即可。<br><a href="https://pan.baidu.com/share/link?shareid=2339109163&amp;uk=4185473307" target="_blank" rel="external">MwebView下载</a> 提取密码:htqc 解压密码:xclient.info<br>以上相关设置教程<a href="http://zh.mweb.im/mweb-1.9.3-release.html" target="_blank" rel="external">点我跳转</a></p>
<p>2.添加分类及标签</p>
<p><strong>大坑:<br>    所有的:号后面一定要加空格，然后才填写，要不然识别不了，生成错误</strong></p>
<p>3.修改字体样式</p>
<p>4.设置代码高亮<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我是代码块</div></pre></td></tr></table></figure></p>
<p>   <strong> MarkDown中该语法标记为代码块，而要使代码高亮，则在后面添加你代码的类型，如  </strong></p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BLOCK_CODE = <span class="string">"https://guangxingmao.github.io"</span>;</div></pre></td></tr></table></figure>
</code></pre><p>5.添加社交链接——现主要有github,weibo,zhihu</p>
<p>2-5以上相关设置<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">点我跳转</a></p>
<h4 id="2017-05-11"><a href="#2017-05-11" class="headerlink" title="2017.05.11"></a>2017.05.11</h4><p>1.设置”阅读全文”功能 推荐使用 <!-- more --><br>以上相关设置<a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">点我跳转</a></p>
<p>2.添加社会化评论系统，使用的是Disqus。<br>以上相关设置<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">点我跳转</a></p>
<p><strong>终于感觉有点blog的样子，哈哈</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;之后对博客界面，动画等的更新及优化就都写在这篇里面了。&quot;&gt;&lt;a href=&quot;#之后对博客界面，动画等的更新及优化就都写在这篇里面了。&quot; class=&quot;headerlink&quot; title=&quot;之后对博客界面，动画等的更新及优化就都写在这篇里面了。&quot;&gt;&lt;/a&gt;之后对博客界面，动画等的更新及优化就都写在这篇里面了。&lt;/h3&gt;&lt;p&gt;本人目前使用的主题是Hexo-NexT,所以想要配置一些相关的设置只要去其官网就行了，&lt;a href=&quot;http://theme-next.iissnan.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我跳转&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外再附上MarkDown的语法入门（Mou）,确实格式好看了很多&lt;a href=&quot;http://www.jianshu.com/p/0130ad32a08d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我跳转&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="工作学习" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>android控件自动化埋点统计</title>
    <link href="http://yoursite.com/2017/05/09/android%E6%8E%A7%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%8B%E7%82%B9%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2017/05/09/android控件自动化埋点统计/</id>
    <published>2017-05-09T05:24:19.000Z</published>
    <updated>2017-05-11T02:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　想到应用统计，平时我们使用的一般都是第三方的，比如百度统计，友盟统计，这几天公司要做自己的统计，于是乎也找了一些自动化埋点的博文学习使用。最后会给出参考链接，非常感谢。</p>
<h3 id="现有的几种埋点技术的实现原理和优劣分析"><a href="#现有的几种埋点技术的实现原理和优劣分析" class="headerlink" title="现有的几种埋点技术的实现原理和优劣分析"></a>现有的几种埋点技术的实现原理和优劣分析</h3><p>　<strong>1.代码埋点</strong>：将收集数据的代码直接写在需要的地方，当用户点击某个控件或者打开某个页面时调用到该部分代码完成数据的收集。<br>　    优势：准确性高，收集数据和发送数据都能精确控制，同时能方便的设置自定义属性，自定义控件，自定义View等。<br>　    劣势：埋点工作量大，更新代价大。<br>　<strong>2.可视化埋点</strong>：根据配置文件收集用户行为，从而获取数据进行分析。<br>　  优势：无须手动埋点，配置文件可动态更新。<br>　  劣势：配置文件的配置比较耗时，弹出框，隐藏控件等行为不能收集。收集的数据比较简单，只能收集用户行为，不能收集到与行为相关的具体数据。<br>　<strong>3.无埋点</strong>：与可视化埋点基本一致。不同点在于可视化埋点是根据配置文件收集数据，无埋点是预先收集所有的用户行为，然后根据　配置文件来提取数据。无埋点可以通过修改配置文件追溯之前的用户行为数据。<br>　<strong>4.后端埋点</strong>：Sensors Analytics 这个平台有解决方案，优点是能收集到详细的与行为相关的数据，适用于电商等大平台。比如用户选择了一件商品，点击了加入购物车，那么可以收集到用户信息，商品信息，商品价格，商品库存，卖家等诸多信息。<br>　<a id="more"></a>  </p>
<h3 id="埋点技术的选择"><a href="#埋点技术的选择" class="headerlink" title="埋点技术的选择"></a>埋点技术的选择</h3><p>　<strong>1.代码埋点</strong>：既可以自己与后台定义接口，也可以使用第三方，常用的有友盟，百度统计等。<br>　<strong>2.可视化埋点和无埋点</strong>：移动端可以自己实现数据采集。第三方有诸葛IO，GrowingIO 。在知乎上查了关于这两个平台的信息，GrowingIO隐藏收费，官网并没有说到收费，但是使用15天后发邮件通知收费并停止数据采集和分析。诸葛IO免费模式的数据量是每月200万条，还有其他收费模式。<br>　<strong>3.后端埋点</strong>：Sensors Analytics  </p>
<h3 id="方案采用"><a href="#方案采用" class="headerlink" title="方案采用"></a>方案采用</h3><p>　根据公司的需求以及对app的规模，只需实现控件按钮点击事件的监听，但是对控件的点击事件处都添加代码，工作量是有点大，所以我们采用控件自动化埋点的方法来统计，只需在BaseActvity中重写dispatchTouchEvent，在xml布局中给需要统计点击事件的控件添加tag标签即可,并不需要在每一个OnClickListener的地方加入拦截代码。  </p>
<h3 id="什么是自动化埋点"><a href="#什么是自动化埋点" class="headerlink" title="什么是自动化埋点"></a>什么是自动化埋点</h3><p>   就是将界面的打开、关闭以及控件点击的log记录放到统一的地方去处理，而不用在许多业务逻辑中加入log代码。这块统一的监控代码需要做到如下的事情：<br>1.可以监控到界面打开或者关闭，并将这种操作记录到log中<br>2.当界面上的有控件被点击的时候，可以监控到哪个界面哪个控件被点击了，并将这些操作信息记录到log中<br>3.要能实现埋点的定制，即对需要埋点的控件或者界面才记录它们的操作log</p>
<h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p>  <em>创建BaseActivity基类，实现控件的点击监听，根据UI布局的特性和Android点击事件传递机制实现。让创建的BaseActivity基类重写Activity的dispatchTouchEvent,当touch button时，获取到按下和抬起产生的MotionEvent对象，从而通过getRawX()和getRawY()方法获取到点击位置在界面中的坐标，然后搜索所有子view或者控件的布局区域示范包含点击位置，从而判断那个view或控件被点击了，再通过getTag()获取到我们控件的标签。</em></p>
<p><strong> 1.首选在我们的application中设置启动自动埋点</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAutoClickHook</span><span class="params">()</span> </span>&#123;</div><div class="line">    BehaviorUtil.setAutoCollectEvent(<span class="keyword">true</span>);</div><div class="line">    BehaviorUtil.setToastAutoCollectEvent(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 2.然后在onAttachedToWindow()方法，该方法是在onResumed()方法之后，当view和window绑定的时候就会调用该方法，在该方法中我们通过getWindow().getDecorView()方法获取到根节点view的对象。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">     <span class="comment">//获取到根节点的view</span></div><div class="line">     rootView = getWindow().getDecorView(); </div><div class="line">     <span class="comment">//控件在视图树上的根路径</span></div><div class="line">     rootViewTree = getPackageName() + <span class="string">"."</span> + getClass().getSimpleName();    </div><div class="line">     <span class="comment">//前缀名 bigData</span></div><div class="line">     bigDataPrefix = getString(R.string.collection_tag);</div><div class="line">     <span class="comment">//前缀名 bigData_    </span></div><div class="line">     bigDataIngorePrefix = getString(R.string.collection_ignore_tag);</div><div class="line">     <span class="comment">//前缀名 bigdata_ignore</span></div><div class="line">     bigDataEventPrefix = getString(R.string.collection_event_prefix);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 3.其次我们便重写dispatchTouchEvent()方法,我们判断是否自动埋点，如果为true，我们就处理自动埋点的事件</strong>  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">	<span class="comment">//判断是否自动埋点</span></div><div class="line">    <span class="keyword">if</span> (BehaviorUtil.isAutoCollectEvent()) &#123;</div><div class="line">        dealAutoCollect(ev);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 4.在处理自动埋点的时候，我们就要判断touch状态，当为down的时候，我们就找到down点击位置的那个控件所在的视图</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ClickView <span class="title">findClickView</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    Log.e(TAG, <span class="string">"bigdata--&gt;findClickView"</span>);</div><div class="line">    ClickView clickView = <span class="keyword">new</span> ClickView(rootView, rootViewTree);</div><div class="line">    <span class="keyword">return</span> searchClickView(clickView, ev, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 5.ClickView是一个自定义的内部类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickView</span> </span>&#123;</div><div class="line"></div><div class="line">    View   view;	          <span class="comment">//view</span></div><div class="line">    String viewTree;	      <span class="comment">//view在视图树上的路径</span></div><div class="line">    String specifyTag;</div><div class="line">    <span class="keyword">int</span> level            = <span class="number">0</span>;<span class="comment">//层级默认为0</span></div><div class="line">    <span class="keyword">int</span> filterLevelCount = <span class="number">3</span>;<span class="comment">//需要过滤的层级</span></div><div class="line"></div><div class="line">    ClickView(View view, String viewTree) &#123;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">        <span class="keyword">this</span>.viewTree = viewTree;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 6.通过点击的视图再去查找点击的view</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ClickView <span class="title">searchClickView</span><span class="params">(ClickView myView, MotionEvent event, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    ClickView clickView = <span class="keyword">null</span>;</div><div class="line">    View view = myView.view;</div><div class="line">    <span class="keyword">if</span> (isInView(view, event)) &#123;	<span class="comment">//遍历根view下的子view以及所有子view上的控件</span></div><div class="line">        <span class="comment">// 当第二层不为LinearLayout时，说明系统进行了改造，多了一层,需要多剔除一层</span></div><div class="line">        myView.level++;</div><div class="line">        <span class="keyword">if</span> (myView.level == <span class="number">2</span> &amp;&amp; !<span class="string">"LinearLayout"</span>.equals(view.getClass().getSimpleName())) &#123;</div><div class="line">            myView.filterLevelCount++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (myView.level &gt; myView.filterLevelCount) &#123;</div><div class="line">            myView.viewTree = myView.viewTree + <span class="string">"."</span> + view.getClass().getSimpleName() + <span class="string">"["</span> + index + <span class="string">"]"</span>;</div><div class="line">        &#125;</div><div class="line">        Log.i(TAG, <span class="string">"bigdata--&gt;tag = "</span> + view.getTag());</div><div class="line">        <span class="comment">// 如果Layout有设置特定的tag，则直接返回View，主要用于复合组件的点击事件</span></div><div class="line">        <span class="keyword">if</span> (view.getTag() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 主动标记不需要统计时，不进行自动统计</span></div><div class="line">            String tag = view.getTag().toString();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (tag.startsWith(bigDataIngorePrefix)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag.startsWith(bigDataPrefix)) &#123;</div><div class="line">                <span class="keyword">if</span> (tag.startsWith(bigDataEventPrefix)) &#123;</div><div class="line">                    myView.specifyTag = tag.replace(bigDataEventPrefix, <span class="string">""</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> myView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;    <span class="comment">//遇到一些Layout之类的ViewGroup，继续遍历它下面的子View</span></div><div class="line">            <span class="keyword">if</span> (view <span class="keyword">instanceof</span> AbsListView) &#123;</div><div class="line">                Log.i(TAG, <span class="string">"bigdata--&gt;AbsListView "</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ViewGroup group = (ViewGroup) view;</div><div class="line">            <span class="keyword">int</span> childCount = group.getChildCount();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> myView;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">                myView.view = group.getChildAt(i);</div><div class="line">                clickView = searchClickView(myView, event, i);</div><div class="line">                <span class="keyword">if</span> (clickView != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> clickView;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            clickView = myView;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> clickView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 7.由于Activty的UI是层层嵌套的，isInView()方法就是通过根view层层遍历其下的子view以及子view上的控件，这些view和控件在屏幕中的坐标和高度我们是可以通过MotionEvent对象获取到的，从而搜索所有子view或者控件的布局区域示范包含“点击位置”，从而来判断那个view或控件被点击。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInView</span><span class="params">(View view, MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="comment">//能被点击的view必然是可见的</span></div><div class="line">       <span class="keyword">if</span> (view == <span class="keyword">null</span> || view.getVisibility() != View.VISIBLE) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">int</span> clickX = (<span class="keyword">int</span>) event.getRawX();</div><div class="line">       <span class="keyword">int</span> clickY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">       <span class="comment">//如下的view表示Activity中的子View或者控件</span></div><div class="line">       <span class="keyword">int</span>[] location = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">       view.getLocationOnScreen(location);</div><div class="line">       <span class="keyword">int</span> x = location[<span class="number">0</span>];</div><div class="line">       <span class="keyword">int</span> y = location[<span class="number">1</span>];</div><div class="line">       <span class="keyword">int</span> width = view.getWidth();</div><div class="line">       <span class="keyword">int</span> height = view.getHeight();</div><div class="line">       <span class="comment">//返回true，则判断这个view被点击了</span></div><div class="line">       <span class="keyword">return</span> clickX &gt; x &amp;&amp; clickX &lt; (x + width) &amp;&amp; clickY &gt; y &amp;&amp; clickY &lt; (y + height);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>8.由于是遍历view层其下的子view,所以isInView会被调用多次，myView.level也会++,代表当前遍历到view的层级，并且如果你在xml中给布局设置了tag，也会将相应的tag打印出来，如果没设置的话，getTag()返回null,查看打印日志我们可以看到层层遍历下取到的tag若没有定义则为null,并且funcName就是我们最后点击这个条目所在View的层级。</strong><br><img src="http://opn79542e.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-10%2022.14.36.png" alt="log"></p>
<p><strong>9.最后是BehaviorUtil的代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BehaviorUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BehaviorUtil"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否toast自动埋点的事件</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isToast;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否自动埋点</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isAutoCollectEvent;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否显示自动统计事件名称</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isToastAutoCollectEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isToast;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否显示自动统计事件</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> toast</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setToastAutoCollectEvent</span><span class="params">(<span class="keyword">boolean</span> toast)</span> </span>&#123;</div><div class="line">        isToast = toast;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 计次事件统计</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> functionName 触发本次动作的功能点名，不能为空</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clickEvent</span><span class="params">(String functionName)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"click event :"</span> + functionName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否自动埋点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAutoCollectEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isAutoCollectEvent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否自动埋点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAutoCollectEvent</span><span class="params">(<span class="keyword">boolean</span> isAutoCollectEvent)</span> </span>&#123;</div><div class="line">        BehaviorUtil.isAutoCollectEvent = isAutoCollectEvent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>自动化埋点存在的问题和难点</strong><br>像有些布局我们可以通过该方法获取到被点击的控件，但是对于某些控件却找的不够准确，比如我在listview的header布局，那么它就找不到上面的控件，显示的fucName都是同一个，并且对于一些隐藏的控件，弹出窗口等都不好处理，那么这个UI路径作为唯一标识，那也就没办法自动埋点了，只能通过手动埋点来补充。<br>并且制动埋点的定制还需要自己写代码生成一个埋点列表，需要人工去查看比对，若一些控件布局经常发生变化，每一次都要重新找埋点控件的UI路径，也是相当麻烦的，并且在不同android版本会造成控件的UI路径不同，自动化埋点还存在很多的坑，还有很大的难点要克服。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://blog.csdn.net/hhcoco/article/details/52243079" target="_blank" rel="external">Android埋点技术分析调研</a><br><a href="http://blog.csdn.net/fkaking/article/details/50338467" target="_blank" rel="external">Android自动化埋点的实践</a><br><a href="http://blog.csdn.net/gykimo/article/details/24772853" target="_blank" rel="external">Android - 自动化埋点</a><br><a href="http://www.jianshu.com/p/b5ffe845fe2d" target="_blank" rel="external">Android无埋点数据收集SDK关键技术</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　想到应用统计，平时我们使用的一般都是第三方的，比如百度统计，友盟统计，这几天公司要做自己的统计，于是乎也找了一些自动化埋点的博文学习使用。最后会给出参考链接，非常感谢。&lt;/p&gt;
&lt;h3 id=&quot;现有的几种埋点技术的实现原理和优劣分析&quot;&gt;&lt;a href=&quot;#现有的几种埋点技术的实现原理和优劣分析&quot; class=&quot;headerlink&quot; title=&quot;现有的几种埋点技术的实现原理和优劣分析&quot;&gt;&lt;/a&gt;现有的几种埋点技术的实现原理和优劣分析&lt;/h3&gt;&lt;p&gt;　&lt;strong&gt;1.代码埋点&lt;/strong&gt;：将收集数据的代码直接写在需要的地方，当用户点击某个控件或者打开某个页面时调用到该部分代码完成数据的收集。&lt;br&gt;　    优势：准确性高，收集数据和发送数据都能精确控制，同时能方便的设置自定义属性，自定义控件，自定义View等。&lt;br&gt;　    劣势：埋点工作量大，更新代价大。&lt;br&gt;　&lt;strong&gt;2.可视化埋点&lt;/strong&gt;：根据配置文件收集用户行为，从而获取数据进行分析。&lt;br&gt;　  优势：无须手动埋点，配置文件可动态更新。&lt;br&gt;　  劣势：配置文件的配置比较耗时，弹出框，隐藏控件等行为不能收集。收集的数据比较简单，只能收集用户行为，不能收集到与行为相关的具体数据。&lt;br&gt;　&lt;strong&gt;3.无埋点&lt;/strong&gt;：与可视化埋点基本一致。不同点在于可视化埋点是根据配置文件收集数据，无埋点是预先收集所有的用户行为，然后根据　配置文件来提取数据。无埋点可以通过修改配置文件追溯之前的用户行为数据。&lt;br&gt;　&lt;strong&gt;4.后端埋点&lt;/strong&gt;：Sensors Analytics 这个平台有解决方案，优点是能收集到详细的与行为相关的数据，适用于电商等大平台。比如用户选择了一件商品，点击了加入购物车，那么可以收集到用户信息，商品信息，商品价格，商品库存，卖家等诸多信息。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="工作学习" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="自动化埋点" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%8B%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>5月份目标</title>
    <link href="http://yoursite.com/2017/05/08/5%E6%9C%88%E4%BB%BD%E7%9B%AE%E6%A0%87/"/>
    <id>http://yoursite.com/2017/05/08/5月份目标/</id>
    <published>2017-05-08T15:19:38.000Z</published>
    <updated>2017-05-14T16:33:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-hexo博客的更新优化-附上转载链接"><a href="#1-hexo博客的更新优化-附上转载链接" class="headerlink" title="1.hexo博客的更新优化(附上转载链接)"></a>1.hexo博客的更新优化(附上转载链接)</h4><h4 id="2-oc基本语法的学习-学习笔记记录"><a href="#2-oc基本语法的学习-学习笔记记录" class="headerlink" title="2.oc基本语法的学习(学习笔记记录)"></a>2.oc基本语法的学习(学习笔记记录)</h4><h4 id="3-android插件化与组件化的学习-附上demo"><a href="#3-android插件化与组件化的学习-附上demo" class="headerlink" title="3.android插件化与组件化的学习(附上demo)"></a>3.android插件化与组件化的学习(附上demo)</h4><h4 id="4-android自动化埋点数据收集-思路及实现"><a href="#4-android自动化埋点数据收集-思路及实现" class="headerlink" title="4.android自动化埋点数据收集(思路及实现)"></a>4.android自动化埋点数据收集(思路及实现)</h4><a id="more"></a>
<p>　　2017年过去近半了，感觉前几个月浑浑噩噩的过去了，收获的并不是很多，之前也在CSDN写过一些博客，但是  最后并没有坚持下来，一旦懒癌犯了，太可怕了。其实可以写的东西可以有很多，在公司做的项目经验，平时收藏的文章，摸爬滚打学习的新知识等等，今天用hexo和github搭了一个个人的网站，虽然还是很简陋，但是基本的功能已经实现了，之后还是会不断优化更新的，可以说真的很方便。这里推荐一篇教你如何搭建个人博客的文章（基于mac的），很详细，一步步来就能搭建成功了。<a href="http://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="external">点我跳转</a><br>　　其实写博客的目的对我来说也很简单，就是监督自己，知道自己最近学了什么，做了什么，最近的状态如何，及时的调整找回状态。<br>　　公司的V3.0App在5月中旬就要项目启动了，到时候肯定会很忙，但是在忙的同时，肯定也会有所收获，将这些收获一并记录下来，（想想以前的一些东西，都忘记了），作为经验总结。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　markdown用的还不是很熟练。。还要看一下md语法怎么改格式，弄的漂亮一点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-hexo博客的更新优化-附上转载链接&quot;&gt;&lt;a href=&quot;#1-hexo博客的更新优化-附上转载链接&quot; class=&quot;headerlink&quot; title=&quot;1.hexo博客的更新优化(附上转载链接)&quot;&gt;&lt;/a&gt;1.hexo博客的更新优化(附上转载链接)&lt;/h4&gt;&lt;h4 id=&quot;2-oc基本语法的学习-学习笔记记录&quot;&gt;&lt;a href=&quot;#2-oc基本语法的学习-学习笔记记录&quot; class=&quot;headerlink&quot; title=&quot;2.oc基本语法的学习(学习笔记记录)&quot;&gt;&lt;/a&gt;2.oc基本语法的学习(学习笔记记录)&lt;/h4&gt;&lt;h4 id=&quot;3-android插件化与组件化的学习-附上demo&quot;&gt;&lt;a href=&quot;#3-android插件化与组件化的学习-附上demo&quot; class=&quot;headerlink&quot; title=&quot;3.android插件化与组件化的学习(附上demo)&quot;&gt;&lt;/a&gt;3.android插件化与组件化的学习(附上demo)&lt;/h4&gt;&lt;h4 id=&quot;4-android自动化埋点数据收集-思路及实现&quot;&gt;&lt;a href=&quot;#4-android自动化埋点数据收集-思路及实现&quot; class=&quot;headerlink&quot; title=&quot;4.android自动化埋点数据收集(思路及实现)&quot;&gt;&lt;/a&gt;4.android自动化埋点数据收集(思路及实现)&lt;/h4&gt;
    
    </summary>
    
      <category term="小目标" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%9B%AE%E6%A0%87/"/>
    
    
      <category term="再不奋斗就老啦" scheme="http://yoursite.com/tags/%E5%86%8D%E4%B8%8D%E5%A5%8B%E6%96%97%E5%B0%B1%E8%80%81%E5%95%A6/"/>
    
  </entry>
  
</feed>
